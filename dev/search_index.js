var documenterSearchIndex = {"docs":
[{"location":"json/#Serializing-Stock-and-Flow-Models","page":"Serialization","title":"Serializing Stock and Flow Models","text":"","category":"section"},{"location":"json/","page":"Serialization","title":"Serialization","text":"using StockFlow\nusing Catlab\nusing Catlab.CategoricalAlgebra\nusing JSON3\nimport StockFlow: StockAndFlowpUntyped, vectorify, state_dict, add_stocks!, add_flow!, add_links!","category":"page"},{"location":"json/","page":"Serialization","title":"Serialization","text":"In order to serialize our models to JSON, we need to encode our functions as strings instead of julia functions. You can always recover the original model with Base.Meta.parse and eval.","category":"page"},{"location":"json/","page":"Serialization","title":"Serialization","text":"StockAndFlowSymbolic = StockAndFlowpUntyped{Symbol,String} \n\n# This is our constructor specialized to String formulas.\nNewStockAndFlowSymbolic(s,f) = begin\n\td = StockAndFlowSymbolic()\n\n    s = vectorify(s)\n    add_stocks!(d,length(s),sname=s)\n\n    s_idx = state_dict(s)\n    f = vectorify(f)\n    for (i, ((fattr,uds),ls)) in enumerate(f)\n      fn = first(fattr)\n      ff = last(fattr)\n    \tsui = s_idx[first(uds)]\n    \tsdi = s_idx[last(uds)]\n    \tls = vectorify(ls)\n    \tadd_flow!(d,sui,sdi,fname=fn,ϕf=ff)\n    \tadd_links!(d,map(x->s_idx[x],ls),repeat([i], length(ls)), length(ls))\n    end\n    d\nend","category":"page"},{"location":"json/#Examples","page":"Serialization","title":"Examples","text":"","category":"section"},{"location":"json/","page":"Serialization","title":"Serialization","text":"Our first example model is SIR.","category":"page"},{"location":"json/","page":"Serialization","title":"Serialization","text":"# define functions ϕ of flows in the SIR model\nfNewIncidence = \"p.cβ*u.S*u.I/p.N\"\nfNewRecovery = \"u.I/p.tr\"\n\n# StockAndFlowp(stocks,\n#               (flow=>function, upstream=>downstream) => stocks linked)\nsir = NewStockAndFlowSymbolic((:S, :I, :R), \n   ((:NewIncidence=>fNewIncidence, :S=>:I)=>(:S,:I),\n    (:NewRecovery=>fNewRecovery, :I=>:R)=>:I))\n","category":"page"},{"location":"json/","page":"Serialization","title":"Serialization","text":"@example JSON JSON3.pretty(generatejsonacset(sir))","category":"page"},{"location":"json/","page":"Serialization","title":"Serialization","text":"\nWe can include some of the premade models, which are found in the `PremadeModels` module. They are all full-bore Stock and Flows.\n","category":"page"},{"location":"json/","page":"Serialization","title":"Serialization","text":"@example JSON m = StockFlow.PremadeModels.seir_model","category":"page"},{"location":"json/","page":"Serialization","title":"Serialization","text":"","category":"page"},{"location":"json/","page":"Serialization","title":"Serialization","text":"@example JSON JSON3.pretty(generatejsonacset(m))","category":"page"},{"location":"json/","page":"Serialization","title":"Serialization","text":"\n## Schemas\n\nThe restricted class of primitive models.\n","category":"page"},{"location":"json/","page":"Serialization","title":"Serialization","text":"@example JSON JSON3.pretty(generatejsonacset_schema(TheoryStockAndFlowp))","category":"page"},{"location":"json/","page":"Serialization","title":"Serialization","text":"\nAnd for the generic schema\n","category":"page"},{"location":"json/","page":"Serialization","title":"Serialization","text":"@example JSON JSON3.pretty(generatejsonacset_schema(TheoryStockAndFlow)) ```","category":"page"},{"location":"generated/full_fledged_schema_examples_new/stratification/sir_standard_stratification/","page":"SIR Standard Stratification","title":"SIR Standard Stratification","text":"EditURL = \"../../../../literate/full_fledged_schema_examples_new/stratification/sir_standard_stratification.jl\"","category":"page"},{"location":"generated/full_fledged_schema_examples_new/stratification/sir_standard_stratification/#SIR-Standard-Stratification","page":"SIR Standard Stratification","title":"SIR Standard Stratification","text":"","category":"section"},{"location":"generated/full_fledged_schema_examples_new/stratification/sir_standard_stratification/","page":"SIR Standard Stratification","title":"SIR Standard Stratification","text":"using GraphViz\n\nusing StockFlow\nusing StockFlow.Syntax\n\nusing Catlab\nusing Catlab.CategoricalAlgebra\nusing LabelledArrays\nusing OrdinaryDiffEq\nusing Plots\n\nusing Catlab.Graphics\nusing Catlab.Programs\nusing Catlab.Theories\nusing Catlab.WiringDiagrams\n\nusing Catlab.Graphics.Graphviz: Html\nusing Catlab.Graphics.Graphviz","category":"page"},{"location":"generated/full_fledged_schema_examples_new/stratification/sir_standard_stratification/","page":"SIR Standard Stratification","title":"SIR Standard Stratification","text":"Functions for graphing typed Petri nets","category":"page"},{"location":"generated/full_fledged_schema_examples_new/stratification/sir_standard_stratification/","page":"SIR Standard Stratification","title":"SIR Standard Stratification","text":"colors_vflow = [\"antiquewhite4\",\"antiquewhite\", \"gold\", \"saddlebrown\", \"slateblue\", \"blueviolet\", \"olive\"]\ncolors_s = [\"deeppink\",\"darkorchid\",\"darkred\",\"coral\"] # red series\ncolors_sv = [\"cornflowerblue\",\"cyan4\",\"cyan\",\"chartreuse\"] # green and blue series\ncolors_p = [\"gold\",\"gold4\",\"darkorange1\",\"lightgoldenrod\",\"goldenrod\"] # yellow and orange\n\nflatten(fname::Symbol) = \"$fname\"\n\nfunction flatten(fname::Tuple)\n    names = split(replace(string(fname), \"(\"=>\"\", \")\"=>\"\", \":\"=>\"\"), \",\")\n    for i in 1:length(names)\n        name = strip(names[i])\n        if name[1:2] == \"id\"\n            continue\n        end\n        return name\n    end\n    return \"id\"\nend\n\ndef_stock(typed_StockFlow::ACSetTransformation, colors) =\n  (p,s) -> (\"s$s\", Attributes(:label=>sname(p,s) isa Tuple where T ? Html(replace(string(sname(p,s)), \":\"=>\"\", \",\" => \"<BR/>\", \"(\"=>\"\", \")\"=>\"\")) : \"$(sname(p,s))\",\n                                     :shape=>\"square\",\n                                     :color=>\"black\",\n                                     :style=>\"filled\",\n                                     :fillcolor=>colors[typed_StockFlow[:S](s)]))\n\ndef_parameter(typed_StockFlow::ACSetTransformation, colors) =\n(p, pp) -> (\"p$pp\", Attributes(:label=>pname(p,pp) isa Tuple where T ? Html(replace(string(pname(p,pp)), \":\"=>\"\", \",\" => \"<BR/>\", \"(\"=>\"\", \")\"=>\"\")) : \"$(pname(p,pp))\",\n                                     :shape=>\"circle\",\n                                     :color=>colors[typed_StockFlow[:P](pp)],\n                                     :fontcolor=>colors[typed_StockFlow[:P](pp)]))\n\ndef_auxiliaryVF(typed_StockFlow::ACSetTransformation, colors)=\n  (p, v) -> (\"v$v\", Attributes(:label=>make_v_expr(p,v) isa Tuple where T ? Html(replace(string(make_v_expr(p,v)), \":\"=>\"\", \",\" => \"<BR/>\", \"(\"=>\"\", \")\"=>\"\")) : \"$(make_v_expr(p,v))\",\n                                          :shape=>\"plaintext\",\n                                          :fontcolor=>colors[typed_StockFlow[:V](v)]))\n\n\ndef_sumV(typed_StockFlow::ACSetTransformation, colors) =\n  (p, sv) -> (\"sv$sv\", Attributes(:label=>svname(p,sv) isa Tuple where T ? Html(replace(string(svname(p,sv)), \":\"=>\"\", \",\" => \"<BR/>\", \"(\"=>\"\", \")\"=>\"\")) : \"$(svname(p,sv))\",\n                                       :shape=>\"circle\",\n                                       :color=>\"black\",\n                                       :fillcolor=>colors[typed_StockFlow[:SV](sv)],\n                                       :style=>\"filled\"))\n\n\ndef_flow_V(typed_StockFlow::ACSetTransformation, colors)=\n  (p, us, ds, v, f) -> begin\n    labelfontsize = \"6\"\n    colorType = colors[typed_StockFlow[:F](f)]\n    color = \"$colorType\"*\":invis:\"*\"$colorType\"\n    arrowhead = \"none\"\n    splines = \"ortho\"\n    return ([us, \"v$v\"],Attributes(:label=>\"\", :labelfontsize=>labelfontsize, :color=>color, :arrowhead=>arrowhead, :splines=>splines)),\n           ([\"v$v\", ds],Attributes(:label=>Html(flatten(fname(p,f))), :labelfontsize=>labelfontsize, :color=>color, :splines=>splines))\nend\n\ndef_flow_noneV(typed_StockFlow::ACSetTransformation, colors)=\n  (p, us, ds, f) -> begin\n     colorType = colors[typed_StockFlow[:F](f)]\n     color = \"$colorType\"*\":invis:\"*\"$colorType\"\n     ([us, ds],Attributes(:label=>Html(flatten(fname(p,f))), :labelfontsize=>\"6\", :color=>color))\nend\n\ndef_flow_V(colors = colors_vflow)=\n  (p, us, ds, v, f) -> begin\n    labelfontsize = \"6\"\n    colorType = colors[f]\n    color = \"$colorType\"*\":invis:\"*\"$colorType\"\n    arrowhead = \"none\"\n    splines = \"ortho\"\n    return ([us, \"v$v\"],Attributes(:label=>\"\", :labelfontsize=>labelfontsize, :color=>color, :arrowhead=>arrowhead, :splines=>splines)),\n           ([\"v$v\", ds],Attributes(:label=>Html(flatten(fname(p,f))), :labelfontsize=>labelfontsize, :color=>color, :splines=>splines))\n\nend\n\ndef_flow_noneV(colors = colors_vflow)=\n  (p, us, ds, f) -> begin\n     colorType = colors[f]\n     color = \"$colorType\"*\":invis:\"*\"$colorType\"\n     ([us, ds],Attributes(:label=>Html(flatten(fname(p,f))), :labelfontsize=>\"6\", :color=>color))\nend\n\nGraphF_typed(typed_StockFlow::ACSetTransformation, colors_vflow = colors_vflow, colors_s = colors_s, colors_p = colors_p, colors_sv = colors_sv; schema::String=\"C\", type::String=\"SFVL\", rd::String=\"LR\") = GraphF(dom(typed_StockFlow),\n    make_stock = def_stock(typed_StockFlow, colors_s), make_auxiliaryV=def_auxiliaryVF(typed_StockFlow, colors_vflow), make_sumV=def_sumV(typed_StockFlow, colors_sv),\n    make_flow_V=def_flow_V(typed_StockFlow, colors_vflow), make_flow_noneV=def_flow_noneV(typed_StockFlow, colors_vflow),make_parameter=def_parameter(typed_StockFlow, colors_p),schema=schema, type=type, rd=rd\n)","category":"page"},{"location":"generated/full_fledged_schema_examples_new/stratification/sir_standard_stratification/","page":"SIR Standard Stratification","title":"SIR Standard Stratification","text":"using StockFlow: defstock, defparameter, defauxiliaryVF, defsumV, defflowV","category":"page"},{"location":"generated/full_fledged_schema_examples_new/stratification/sir_standard_stratification/#Functions-for-graphing-typed-Petri-nets","page":"SIR Standard Stratification","title":"Functions for graphing typed Petri nets","text":"","category":"section"},{"location":"generated/full_fledged_schema_examples_new/stratification/sir_standard_stratification/","page":"SIR Standard Stratification","title":"SIR Standard Stratification","text":"colorsvflow = [\"antiquewhite4\",\"antiquewhite\", \"gold\", \"saddlebrown\", \"slateblue\", \"blueviolet\", \"olive\"] colorss = [\"deeppink\",\"darkorchid\",\"darkred\",\"coral\"] # red series colorssv = [\"cornflowerblue\",\"cyan4\",\"cyan\",\"chartreuse\"] # green and blue series colorsp = [\"gold\",\"gold4\",\"darkorange1\",\"lightgoldenrod\",\"goldenrod\"] # yellow and orange","category":"page"},{"location":"generated/full_fledged_schema_examples_new/stratification/sir_standard_stratification/","page":"SIR Standard Stratification","title":"SIR Standard Stratification","text":"flatten(fname::Symbol) = \"fname\"","category":"page"},{"location":"generated/full_fledged_schema_examples_new/stratification/sir_standard_stratification/","page":"SIR Standard Stratification","title":"SIR Standard Stratification","text":"function flatten(fname::Tuple)     names = split(replace(string(fname), \"(\"=>\"\", \")\"=>\"\", \":\"=>\"\"), \",\")     for i in 1:length(names)         name = strip(names[i])         if name[1:2] == \"id\"             continue         end         return name     end     return \"id\" end","category":"page"},{"location":"generated/full_fledged_schema_examples_new/stratification/sir_standard_stratification/","page":"SIR Standard Stratification","title":"SIR Standard Stratification","text":"defflownoneV(colors = colors_vflow)=   (p, us, ds, f) -> begin      colorType = colors[f]      color = \"colorType*invis*colorType\"      ([us, ds],Attributes(:label=>Html(flatten(fname(p,f))), :labelfontsize=>\"6\", :color=>color)) end","category":"page"},{"location":"generated/full_fledged_schema_examples_new/stratification/sir_standard_stratification/","page":"SIR Standard Stratification","title":"SIR Standard Stratification","text":"GraphFtyped(typedStockFlow::ACSetTransformation, colorsvflow = colorsvflow, colorss = colorss, colorsp = colorsp, colorssv = colorssv; schema::String=\"C\", type::String=\"SFVL\", rd::String=\"LR\") = GraphF(dom(typedStockFlow),     makestock = defstock(typedStockFlow, colorss), makeauxiliaryV=defauxiliaryVF(typedStockFlow, colorsvflow), makesumV=defsumV(typedStockFlow, colorssv),     makeflowV=defflowV(typedStockFlow, colorsvflow), makeflownoneV=defflownoneV(typedStockFlow, colorsvflow),makeparameter=defparameter(typedStockFlow, colors_p),schema=schema, type=type, rd=rd )","category":"page"},{"location":"generated/full_fledged_schema_examples_new/stratification/sir_standard_stratification/","page":"SIR Standard Stratification","title":"SIR Standard Stratification","text":"s_type = @stock_and_flow begin\n    :stocks\n    pop\n\n    :parameters\n    c\n    β\n    rFstOrder\n    rAge\n\n    :dynamic_variables\n    v_prevalence = pop / N\n    v_meanInfectiousContactsPerS = c * v_prevalence\n    v_perSIncidenceRate = β * v_meanInfectiousContactsPerS\n    v_inf = pop * v_perSIncidenceRate\n    v_fstOrder = pop * rFstOrder\n    v_aging = pop * rAge\n\n    :flows\n    pop => f_inf(v_inf) => pop\n    pop => f_fstOrder(v_fstOrder) => pop\n    pop => f_aging(v_aging) => pop\n\n\n    :sums\n    N = [pop]\n\n\nend\n\n\nGraphF(s_type)\n\nGraphF_typed(id(s_type))","category":"page"},{"location":"generated/full_fledged_schema_examples_new/stratification/sir_standard_stratification/","page":"SIR Standard Stratification","title":"SIR Standard Stratification","text":"eliminate the attribute of name to enable pass the natural check only eliminate the name, the other two attributes should be okay","category":"page"},{"location":"generated/full_fledged_schema_examples_new/stratification/sir_standard_stratification/","page":"SIR Standard Stratification","title":"SIR Standard Stratification","text":"s_type = map(s_type, Name=name->nothing, Op=op->nothing, Position=pos->nothing);\n\ns, = parts(s_type, :S)\nN, = parts(s_type, :SV)\nlsn, = parts(s_type, :LS)\nf_inf, f_fstorder, f_aging = parts(s_type, :F)\ni_inf, i_fstorder, i_aging = parts(s_type, :I) # note, different order from previous in both inflow and outflow\no_inf, o_fstorder, o_aging = parts(s_type, :O)\nv_IN, v_cIN, v_betacIN, v_inf, v_fstOrder, v_aging = parts(s_type, :V)\nlv_IN1, lv_inf1, lv_fstOrder1, lv_aging1 = parts(s_type, :LV)\nlsv_IN2, = parts(s_type, :LSV)\np_c, p_beta, p_rfstOrder, p_rAge = parts(s_type, :P)\nlvv_cIN2, lvv_betacIN2, lvv_inf2 = parts(s_type, :LVV)\nlpv_cIN1, lpv_betacIN1, lpv_fstOrder2, lpv_aging2 = parts(s_type, :LPV)\n\nsir = @stock_and_flow begin\n    :stocks\n    S\n    I\n    R\n\n    :parameters\n    c\n    β\n    rRec\n    rAge\n\n    :dynamic_variables\n    v_prevalence = I / N\n    v_meanInfectiousContactsPerS = c * v_prevalence\n    v_perSIncidenceRate = β * v_meanInfectiousContactsPerS\n    v_newInfections = S * v_perSIncidenceRate\n    v_newRecovery = I * rRec\n    v_idS = S * rAge\n    v_idI = I * rAge\n    v_idR = R * rAge\n\n    :flows\n    S => f_idS(v_idS) => S\n    S => f_inf(v_newInfections) => I\n    I => f_idI(v_idI) => I\n    I => f_rec(v_newRecovery) => R\n    R => f_idR(v_idR) => R\n\n    :sums\n    N = [S, I, R]\n\n\nend\n\nGraphF(sir)\n\ntyped_aggregate_model=ACSetTransformation(sir, s_type,\n  S = [s,s,s],\n  SV = [N],\n  LS = [lsn,lsn,lsn],\n  F = [f_aging, f_inf, f_aging, f_fstorder, f_aging],\n  I = [i_aging, i_inf, i_aging, i_fstorder, i_aging], #i_inf, i_fstorder, i_aging\n  O = [o_aging, o_inf, o_aging, o_fstorder, o_aging],\n  V = [v_IN, v_cIN, v_betacIN, v_inf, v_fstOrder, v_aging, v_aging, v_aging],\n  LV = [lv_IN1, lv_inf1, lv_fstOrder1, lv_aging1, lv_aging1, lv_aging1],\n  LSV = [lsv_IN2],\n  P = [p_c, p_beta, p_rfstOrder, p_rAge],\n  LVV = [lvv_cIN2, lvv_betacIN2, lvv_inf2],\n  LPV = [lpv_cIN1, lpv_betacIN1, lpv_fstOrder2, lpv_aging2, lpv_aging2, lpv_aging2],\n  Name = name -> nothing, Op=op->nothing, Position=pos->nothing\n);\n@assert is_natural(typed_aggregate_model)\n\nGraphF_typed(typed_aggregate_model)\n\nage2 = @stock_and_flow begin\n    :stocks\n    Child\n    Adult\n\n    :parameters\n    c_C\n    β\n    r\n    rAge\n    c_A\n\n    :dynamic_variables\n    v_INC = Child / NC\n    v_cINC = c_C * v_INC\n    v_cβINC = β * v_cINC\n\n    v_infC = Child * v_cβINC\n    v_fstC = Child * r\n    v_agingC = Child * rAge\n\n\n    v_INA = Adult / NA\n    v_cINA = c_A * v_INA\n    v_cβINA = β * v_cINA\n\n    v_infA = Adult * v_cβINA\n    v_fstA = Adult * r\n\n    :flows\n    Child => f_infC(v_infC) => Child\n    Child => f_frsC(v_fstC) => Child\n    Child => f_aging(v_agingC) => Adult\n    Adult => f_infA(v_infA) => Adult\n    Adult => f_frsA(v_fstA) => Adult\n\n\n    :sums\n    NC = [Child]\n    NA = [Adult]\nend\n\ntyped_age_model=ACSetTransformation(age2, s_type,\n  S = [s,s],\n  SV = [N,N],\n  LS = [lsn,lsn],\n  F = [f_inf, f_fstorder, f_aging, f_inf, f_fstorder],\n  I = [i_inf, i_fstorder, i_aging, i_inf, i_fstorder],\n  O = [o_inf, o_fstorder, o_aging, o_inf, o_fstorder],\n  V = [v_IN, v_cIN, v_betacIN, v_inf, v_fstOrder, v_aging, v_IN, v_cIN, v_betacIN, v_inf, v_fstOrder],\n  LV = [lv_IN1, lv_inf1, lv_fstOrder1, lv_aging1, lv_IN1, lv_inf1, lv_fstOrder1],\n  LSV = [lsv_IN2, lsv_IN2],\n  P = [p_c, p_beta, p_rfstOrder, p_rAge, p_c],\n  LVV = [lvv_cIN2, lvv_betacIN2, lvv_inf2, lvv_cIN2, lvv_betacIN2, lvv_inf2],\n  LPV = [lpv_cIN1, lpv_betacIN1, lpv_fstOrder2, lpv_aging2, lpv_cIN1, lpv_betacIN1, lpv_fstOrder2],\n  Name = name -> nothing, Op=op->nothing, Position=pos->nothing\n);\n@assert is_natural(typed_age_model)\n\nGraphF_typed(typed_age_model)\n\naged_sir = pullback(typed_aggregate_model, typed_age_model) |> apex |> rebuildStratifiedModelByFlattenSymbols;\n\nGraphF(aged_sir)\n\nLS = @stock_and_flow begin\n    :stocks\n    SChild\n    IChild\n    SAdult\n    IAdult\n\n    :parameters\n    cc_C\n    cc_A\n\n    :dynamic_variables\n    v_prevalencev_INC = IChild / NNC\n    v_prevalencev_INA = IAdult / NNA\n    v_meanInfectiousContactsPerSv_cINC = cc_C * v_prevalencev_INC\n    v_meanInfectiousContactsPerSv_cINA = cc_A * v_prevalencev_INA\n\n\n    :sums\n    NNC = [SChild, IChild]\n    NNA = [SAdult, IAdult]\n\n\nend\n\nGraphF(LS)\n\nIS = @stock_and_flow begin\n    :stocks\n    SChild\n    IChild\n    SAdult\n    IAdult\n\n    :parameters\n    cc_C\n    cc_A\n\n    :dynamic_variables\n    v_prevalencev_INC = IChild / NNC\n    v_prevalencev_INA = IAdult / NNA\n    v_meanInfectiousContactsPerSv_cINC = *(cc_C)\n    v_meanInfectiousContactsPerSv_cINA = *(cc_A)\n\n    :sums\n    NNC = [SChild, IChild]\n    NNA = [SAdult, IAdult]\n\n\nend\n\nGraphF(IS)\n\nRS = @stock_and_flow begin\n    :stocks\n    SChild\n    IChild\n    SAdult\n    IAdult\n\n    :parameters\n    fcc\n    fca\n    fac\n    faa\n    cc_C\n    cc_A\n\n    :dynamic_variables\n    v_prevalencev_INC = IChild / NNC\n    v_prevalencev_INA = IAdult / NNA\n    v_CCContacts = fcc * v_prevalencev_INC\n    v_CAContacts = fca * v_prevalencev_INA\n\n    v_ACContacts = fac * v_prevalencev_INC\n    v_AAContacts = faa * v_prevalencev_INA\n\n    v_prevalencev_INC_post = v_CCContacts + v_CAContacts\n    v_prevalencev_INA_post = v_ACContacts + v_AAContacts\n    v_meanInfectiousContactsPerSv_cINC = cc_C * v_prevalencev_INC_post\n    v_meanInfectiousContactsPerSv_cINA = cc_A * v_prevalencev_INA_post\n\n    :sums\n    NNC = [SChild, IChild]\n    NNA = [SAdult, IAdult]\n\n\nend\n\n\nGraphF(RS)\n\nusing AlgebraicRewriting\nusing AlgebraicRewriting: rewrite\nconst hom = Catlab.CategoricalAlgebra.homomorphism\n\nrule_S = Rule(hom(IS,LS), hom(IS,RS))\naged_sir_rewritten = rewrite(rule_S, aged_sir)\nGraphF(aged_sir_rewritten)","category":"page"},{"location":"generated/full_fledged_schema_examples_new/stratification/sir_standard_stratification/","page":"SIR Standard Stratification","title":"SIR Standard Stratification","text":"define values of constant parameters","category":"page"},{"location":"generated/full_fledged_schema_examples_new/stratification/sir_standard_stratification/","page":"SIR Standard Stratification","title":"SIR Standard Stratification","text":"p_stratified_sir = LVector(\n    fcc=0.8, fca=0.2, fac=0.2, faa=0.8, cc_C=0.45, cc_A=0.55,\n    ββ=0.8, rRecr=1.0/14.0, rAgerAge=1.0/(15.0*365.0) #which means the child age group is from 0 to 15 years old\n)","category":"page"},{"location":"generated/full_fledged_schema_examples_new/stratification/sir_standard_stratification/","page":"SIR Standard Stratification","title":"SIR Standard Stratification","text":"define initial values for stocks","category":"page"},{"location":"generated/full_fledged_schema_examples_new/stratification/sir_standard_stratification/","page":"SIR Standard Stratification","title":"SIR Standard Stratification","text":"u0_stratified_sir = LVector(\n    SChild=990.0, IChild=10.0, RChild=0.0,\n    SAdult=4900.0, IAdult=10.0, RAdult=0.0\n);\n\nprob_stratified_sir = ODEProblem(vectorfield(aged_sir_rewritten),u0_stratified_sir,(0.0,100.0),p_stratified_sir);\nsol_stratified_sir = solve(prob_stratified_sir,Tsit5(),abstol=1e-8);\nplot(sol_stratified_sir)","category":"page"},{"location":"generated/full_fledged_schema_examples_new/stratification/sir_standard_stratification/","page":"SIR Standard Stratification","title":"SIR Standard Stratification","text":"to have the figures plotted fix to the wider of the cells","category":"page"},{"location":"generated/full_fledged_schema_examples_new/stratification/sir_standard_stratification/","page":"SIR Standard Stratification","title":"SIR Standard Stratification","text":"HTML(\"\"\"\n<style>\n.output_svg div{\n  width: 100% !important;\n  height: 100% !important;\n}\n</style>\n\"\"\")","category":"page"},{"location":"generated/full_fledged_schema_examples_new/composition/composed_open_population_SIRV_model/","page":"Composed Open Population SIRV Model","title":"Composed Open Population SIRV Model","text":"EditURL = \"../../../../literate/full_fledged_schema_examples_new/composition/composed_open_population_SIRV_model.jl\"","category":"page"},{"location":"generated/full_fledged_schema_examples_new/composition/composed_open_population_SIRV_model/#Composed-Open-Population-SIRV-Model","page":"Composed Open Population SIRV Model","title":"Composed Open Population SIRV Model","text":"","category":"section"},{"location":"generated/full_fledged_schema_examples_new/composition/composed_open_population_SIRV_model/","page":"Composed Open Population SIRV Model","title":"Composed Open Population SIRV Model","text":"using GraphViz\n\nusing StockFlow\nusing StockFlow.Syntax\n\nusing Catlab\nusing Catlab.CategoricalAlgebra\nusing LabelledArrays\nusing OrdinaryDiffEq\nusing Plots\n\nusing Catlab.Graphics\nusing Catlab.Programs\nusing Catlab.Theories\nusing Catlab.WiringDiagrams\n\nsir = @stock_and_flow begin\n\n    :stocks\n    S\n    I\n    R\n\n    :parameters\n    rbirth\n    cbeta\n    rrecovery\n    rdeath\n\n    :dynamic_variables\n    v_inf₁ = I / N\n    v_inf₂ = v_inf₁ * cbeta\n    v_inf₃ =  v_inf₂ * S\n\n    :flows\n    CLOUD => f_birth(rbirth * N) => S\n    S => f_inf(v_inf₃) => I\n    I => f_rec(rrecovery * I) => R\n    S => f_deathS(S * rdeath) => CLOUD\n    I => f_deathI(I * rdeath) => CLOUD\n    R => f_deathR(R * rdeath) => CLOUD\n\n\n    :sums\n    N = [I, R, S]\n\nend\n\nGraphF(sir)\n\nsvi = @stock_and_flow begin\n\n    :stocks\n    S\n    V\n    I\n\n    :parameters\n    rvaccine\n    rdeath\n    lambda\n    evaccine_complement # 1.0 - evaccine\n\n    :dynamic_variables\n    v_vacV = evaccine_complement * V\n    v_infV = v_vacV * lambda\n\n\n    :flows\n    S => f_vacc(S * rvaccine) => V\n    V => f_deathV(V * rdeath) => CLOUD\n    V => f_infV(v_infV) => I\n\n    :sums\n    N = [V, I, S]\n\nend\n\nGraphF(svi)","category":"page"},{"location":"generated/full_fledged_schema_examples_new/composition/composed_open_population_SIRV_model/","page":"Composed Open Population SIRV Model","title":"Composed Open Population SIRV Model","text":"Define the UWD-algebra","category":"page"},{"location":"generated/full_fledged_schema_examples_new/composition/composed_open_population_SIRV_model/","page":"Composed Open Population SIRV Model","title":"Composed Open Population SIRV Model","text":"sirv_uwd = @relation (S,I) begin\n    seir(S,I)\n    svi(S,I)\nend;\ndisplay_uwd(sirv_uwd)","category":"page"},{"location":"generated/full_fledged_schema_examples_new/composition/composed_open_population_SIRV_model/","page":"Composed Open Population SIRV Model","title":"Composed Open Population SIRV Model","text":"Define a foot of the structured multicospan","category":"page"},{"location":"generated/full_fledged_schema_examples_new/composition/composed_open_population_SIRV_model/","page":"Composed Open Population SIRV Model","title":"Composed Open Population SIRV Model","text":"footS=foot(:S, :N, :S=>:N)\nGraphF(footS;schema=\"C0\")","category":"page"},{"location":"generated/full_fledged_schema_examples_new/composition/composed_open_population_SIRV_model/","page":"Composed Open Population SIRV Model","title":"Composed Open Population SIRV Model","text":"Define a foot of the structured multicospan","category":"page"},{"location":"generated/full_fledged_schema_examples_new/composition/composed_open_population_SIRV_model/","page":"Composed Open Population SIRV Model","title":"Composed Open Population SIRV Model","text":"footI=foot(:I, :N, :I=>:N)\nGraphF(footI;schema=\"C0\")","category":"page"},{"location":"generated/full_fledged_schema_examples_new/composition/composed_open_population_SIRV_model/","page":"Composed Open Population SIRV Model","title":"Composed Open Population SIRV Model","text":"Open sir and svi stock and flow diagram with the feet defined before","category":"page"},{"location":"generated/full_fledged_schema_examples_new/composition/composed_open_population_SIRV_model/","page":"Composed Open Population SIRV Model","title":"Composed Open Population SIRV Model","text":"open_sir=Open(sir, footS, footI)\nopen_svi=Open(svi, footS, footI)","category":"page"},{"location":"generated/full_fledged_schema_examples_new/composition/composed_open_population_SIRV_model/","page":"Composed Open Population SIRV Model","title":"Composed Open Population SIRV Model","text":"Compose those two models according the UWD-algebra","category":"page"},{"location":"generated/full_fledged_schema_examples_new/composition/composed_open_population_SIRV_model/","page":"Composed Open Population SIRV Model","title":"Composed Open Population SIRV Model","text":"open_sirv = oapply(sirv_uwd, [open_sir, open_svi])","category":"page"},{"location":"generated/full_fledged_schema_examples_new/composition/composed_open_population_SIRV_model/","page":"Composed Open Population SIRV Model","title":"Composed Open Population SIRV Model","text":"The composed stock and flow diagram is the apex of the composed open stock and flow diagram","category":"page"},{"location":"generated/full_fledged_schema_examples_new/composition/composed_open_population_SIRV_model/","page":"Composed Open Population SIRV Model","title":"Composed Open Population SIRV Model","text":"sirv = apex(open_sirv)\n\nGraphF(sirv)\n\nL = @stock_and_flow begin\n    :stocks\n    V\n    I\n\n    :parameters\n    lambda\n    cbeta\n    evaccine_complement\n\n    :dynamic_variables\n    v_inf₁ = I / N\n    v_inf₂ = v_inf₁ * cbeta\n\n    v_vacV = evaccine_complement * V\n\n\n    v_infV = v_vacV * lambda\n\n\n    :flows\n    V => f_infV(v_infV) => I\n\n    :sums\n    N = [V, I]\n    end;\n\n\n\nGraphF(L)\n\nI = @stock_and_flow begin\n    :stocks\n    V\n    I\n\n    :parameters\n    cbeta\n    evaccine_complement\n\n    :dynamic_variables\n    v_inf₁ = I / N\n    v_inf₂ = v_inf₁ * cbeta\n    v_vacV = evaccine_complement * V\n    v_infV = *(v_vacV)\n\n\n    :flows\n    V => f_infV(v_infV) => I\n\n    :sums\n    N = [V, I]\n    end;\n\n\n\nGraphF(I)\n\nR = @stock_and_flow begin\n    :stocks\n    V\n    I\n\n    :parameters\n    cbeta\n    evaccine_complement\n\n    :dynamic_variables\n    v_inf₁ = I / N\n    v_inf₂ = v_inf₁ * cbeta\n\n    v_vacV = evaccine_complement * V\n\n    v_infV = v_vacV * v_inf₂\n\n    :flows\n    V => f_infV(v_infV) => I\n\n    :sums\n    N = [V, I]\n    end;\n\n\n\nGraphF(R)\n\nusing AlgebraicRewriting\nusing AlgebraicRewriting: rewrite\nconst hom = Catlab.CategoricalAlgebra.homomorphism\nrule = Rule(hom(I,L), hom(I,R))\n\nsirv_rewritten = rewrite(rule, sirv)\nGraphF(sirv_rewritten)","category":"page"},{"location":"generated/full_fledged_schema_examples_new/composition/composed_open_population_SIRV_model/","page":"Composed Open Population SIRV Model","title":"Composed Open Population SIRV Model","text":"define values of constant parameters","category":"page"},{"location":"generated/full_fledged_schema_examples_new/composition/composed_open_population_SIRV_model/","page":"Composed Open Population SIRV Model","title":"Composed Open Population SIRV Model","text":"p = LVector(\n    cbeta=0.1, rbirth=0.001, rdeath=0.001, rrecovery=0.05, # for model sir\n    rvaccine=0.01, evaccine=0.3, evaccine_complement = 0.7 # for model svi\n)","category":"page"},{"location":"generated/full_fledged_schema_examples_new/composition/composed_open_population_SIRV_model/","page":"Composed Open Population SIRV Model","title":"Composed Open Population SIRV Model","text":"define initial values for stocks","category":"page"},{"location":"generated/full_fledged_schema_examples_new/composition/composed_open_population_SIRV_model/","page":"Composed Open Population SIRV Model","title":"Composed Open Population SIRV Model","text":"u0 = LVector(\n    S=990.0, I=10.0, R=0.0, V=0.0\n)\n\nprob_sirv = ODEProblem(vectorfield(sirv_rewritten),u0,(0.0,100.0),p);\nsol_sirv = solve(prob_sirv,Tsit5(),abstol=1e-8);\nplot(sol_sirv)","category":"page"},{"location":"generated/full_fledged_schema_examples_new/composition/composed_open_population_SIRV_model/","page":"Composed Open Population SIRV Model","title":"Composed Open Population SIRV Model","text":"to have the figures plotted fix to the wider of the cells","category":"page"},{"location":"generated/full_fledged_schema_examples_new/composition/composed_open_population_SIRV_model/","page":"Composed Open Population SIRV Model","title":"Composed Open Population SIRV Model","text":"HTML(\"\"\"\n<style>\n.output_svg div{\n  width: 100% !important;\n  height: 100% !important;\n}\n</style>\n\"\"\")","category":"page"},{"location":"generated/full_fledged_schema_examples_new/CasualLoopDiagrams/convert_from_SEIR_stockFlowDiagram/","page":"Convert from SEIR Stock Flow Diagram","title":"Convert from SEIR Stock Flow Diagram","text":"EditURL = \"../../../../literate/full_fledged_schema_examples_new/CasualLoopDiagrams/convert_from_SEIR_stockFlowDiagram.jl\"","category":"page"},{"location":"generated/full_fledged_schema_examples_new/CasualLoopDiagrams/convert_from_SEIR_stockFlowDiagram/#Convert-from-SEIR-Stock-Flow-Diagram","page":"Convert from SEIR Stock Flow Diagram","title":"Convert from SEIR Stock Flow Diagram","text":"","category":"section"},{"location":"generated/full_fledged_schema_examples_new/CasualLoopDiagrams/convert_from_SEIR_stockFlowDiagram/","page":"Convert from SEIR Stock Flow Diagram","title":"Convert from SEIR Stock Flow Diagram","text":"using GraphViz\n\nusing StockFlow\nusing StockFlow.Syntax\n\nseir = @stock_and_flow begin\n    :stocks\n    S\n    E\n    I\n    R\n\n    :parameters\n    μ\n    β\n    tlatent\n    trecovery\n    δ\n\n    :dynamic_variables\n    v_birth = μ * N\n    v_incid₁ = I / N\n    v_incid₂ = S * v_incid₁\n    v_incid₃ = β *  v_incid₂\n    v_inf = E / tlatent\n    v_rec = I / trecovery\n    v_deathS = S * δ\n    v_deathE = E * δ\n    v_deathI = I * δ\n    v_deathR = R * δ\n\n    :flows\n    CLOUD => f_birth(v_birth) => S\n    S => f_incid(v_incid₃) => E\n    S => v_deathS(v_deathS) => CLOUD\n    E => f_inf(v_inf) => I\n    E => f_deathE(v_deathE) => CLOUD\n    I => f_rec(v_rec) => R\n    I => f_deathI(v_deathI) => CLOUD\n    R => f_deathR(v_deathR) => CLOUD\n\n    :sums\n    N = [S,E,I,R]\n\nend\n\nGraphF(seir)\n\nseir_causalLoop = convertToCausalLoop(seir)\n\nGraph(seir_causalLoop)","category":"page"},{"location":"generated/full_fledged_schema_examples_new/composition/SEIR_full_model_measles_chickenpox/","page":"SEIR Full Model Measles Chickenpox","title":"SEIR Full Model Measles Chickenpox","text":"EditURL = \"../../../../literate/full_fledged_schema_examples_new/composition/SEIR_full_model_measles_chickenpox.jl\"","category":"page"},{"location":"generated/full_fledged_schema_examples_new/composition/SEIR_full_model_measles_chickenpox/#SEIR-Full-Model-Measles-Chickenpox","page":"SEIR Full Model Measles Chickenpox","title":"SEIR Full Model Measles Chickenpox","text":"","category":"section"},{"location":"generated/full_fledged_schema_examples_new/composition/SEIR_full_model_measles_chickenpox/","page":"SEIR Full Model Measles Chickenpox","title":"SEIR Full Model Measles Chickenpox","text":"using GraphViz\n\nusing StockFlow\nusing StockFlow.Syntax\n\nusing Catlab\nusing Catlab.CategoricalAlgebra\nusing LabelledArrays\nusing OrdinaryDiffEq\nusing Plots\n\nusing Catlab.Graphics\nusing Catlab.Programs\nusing Catlab.Theories\nusing Catlab.WiringDiagrams\n\nseir = @stock_and_flow begin\n    :stocks\n    S\n    E\n    I\n    R\n\n    :parameters\n    μ\n    β\n    tlatent\n    trecovery\n    δ\n\n    :flows\n    CLOUD => fbirth(μ * N) => S\n    S => fincid(β * S * I / N) => E\n    S => fdeathS(S * δ) => CLOUD\n    E => finf(E / tlatent) => I\n    E => fdeathE(E * δ) => CLOUD\n    I => frec(I / trecovery) => R\n    I => fdeathI(I * δ) => CLOUD\n    R => fdeathR(R * δ) => CLOUD\n\n    :sums\n    N = [S, E, I, R]\n\nend\n\n\n\nGraphF(seir)","category":"page"},{"location":"generated/full_fledged_schema_examples_new/composition/SEIR_full_model_measles_chickenpox/","page":"SEIR Full Model Measles Chickenpox","title":"SEIR Full Model Measles Chickenpox","text":"define parameter values and initial values of stocks define constant parameters","category":"page"},{"location":"generated/full_fledged_schema_examples_new/composition/SEIR_full_model_measles_chickenpox/","page":"SEIR Full Model Measles Chickenpox","title":"SEIR Full Model Measles Chickenpox","text":"p_measles = LVector(\n    β=49.598, μ=0.03/12, δ=0.03/12, tlatent=8.0/30, trecovery=5.0/30\n)","category":"page"},{"location":"generated/full_fledged_schema_examples_new/composition/SEIR_full_model_measles_chickenpox/","page":"SEIR Full Model Measles Chickenpox","title":"SEIR Full Model Measles Chickenpox","text":"define initial values for stocks","category":"page"},{"location":"generated/full_fledged_schema_examples_new/composition/SEIR_full_model_measles_chickenpox/","page":"SEIR Full Model Measles Chickenpox","title":"SEIR Full Model Measles Chickenpox","text":"u0_measles = LVector(\n    S=90000.0-930.0, E=0.0, I=930.0, R=773545.0\n)","category":"page"},{"location":"generated/full_fledged_schema_examples_new/composition/SEIR_full_model_measles_chickenpox/","page":"SEIR Full Model Measles Chickenpox","title":"SEIR Full Model Measles Chickenpox","text":"solve the ODEs The model results are compared with the same model built by Anylogic, and the resules are the same!","category":"page"},{"location":"generated/full_fledged_schema_examples_new/composition/SEIR_full_model_measles_chickenpox/","page":"SEIR Full Model Measles Chickenpox","title":"SEIR Full Model Measles Chickenpox","text":"prob_measles = ODEProblem(vectorfield(seir),u0_measles,(0.0,120.0),p_measles);\nsol_measles = solve(prob_measles,Tsit5(),abstol=1e-8);\nplot(sol_measles)","category":"page"},{"location":"generated/full_fledged_schema_examples_new/composition/SEIR_full_model_measles_chickenpox/","page":"SEIR Full Model Measles Chickenpox","title":"SEIR Full Model Measles Chickenpox","text":"define parameter values and initial values of stocks define constant parameters","category":"page"},{"location":"generated/full_fledged_schema_examples_new/composition/SEIR_full_model_measles_chickenpox/","page":"SEIR Full Model Measles Chickenpox","title":"SEIR Full Model Measles Chickenpox","text":"p_chickenpox = LVector(\n    β=18.0, μ=0.03/12.0, δ=0.03/12.0, tlatent=14.0/30.0, trecovery=5.0/30.0\n)","category":"page"},{"location":"generated/full_fledged_schema_examples_new/composition/SEIR_full_model_measles_chickenpox/","page":"SEIR Full Model Measles Chickenpox","title":"SEIR Full Model Measles Chickenpox","text":"define initial values for stocks","category":"page"},{"location":"generated/full_fledged_schema_examples_new/composition/SEIR_full_model_measles_chickenpox/","page":"SEIR Full Model Measles Chickenpox","title":"SEIR Full Model Measles Chickenpox","text":"u0_chickenpox = LVector(\n    S=295354.0, E=0.0, I=1000.0, R=567191.0\n)","category":"page"},{"location":"generated/full_fledged_schema_examples_new/composition/SEIR_full_model_measles_chickenpox/","page":"SEIR Full Model Measles Chickenpox","title":"SEIR Full Model Measles Chickenpox","text":"solve the ODEs The model results are compared with the same model built by Anylogic, and the resules are the same!","category":"page"},{"location":"generated/full_fledged_schema_examples_new/composition/SEIR_full_model_measles_chickenpox/","page":"SEIR Full Model Measles Chickenpox","title":"SEIR Full Model Measles Chickenpox","text":"prob_chickenpox = ODEProblem(vectorfield(seir),u0_chickenpox,(0.0,120.0),p_chickenpox);\nsol_chickenpox = solve(prob_chickenpox,Tsit5(),abstol=1e-8);\nplot(sol_chickenpox)\n\nsol_chickenpox","category":"page"},{"location":"generated/full_fledged_schema_examples_new/composition/SEIR_full_model_measles_chickenpox/","page":"SEIR Full Model Measles Chickenpox","title":"SEIR Full Model Measles Chickenpox","text":"to have the figures plotted fix to the wider of the cells","category":"page"},{"location":"generated/full_fledged_schema_examples_new/composition/SEIR_full_model_measles_chickenpox/","page":"SEIR Full Model Measles Chickenpox","title":"SEIR Full Model Measles Chickenpox","text":"HTML(\"\"\"\n<style>\n.output_svg div{\n  width: 100% !important;\n  height: 100% !important;\n}\n</style>\n\"\"\")","category":"page"},{"location":"generated/full_fledged_schema_examples_new/composition/COVID_full_model/","page":"COVID Full Model","title":"COVID Full Model","text":"EditURL = \"../../../../literate/full_fledged_schema_examples_new/composition/COVID_full_model.jl\"","category":"page"},{"location":"generated/full_fledged_schema_examples_new/composition/COVID_full_model/#COVID-Full-Model","page":"COVID Full Model","title":"COVID Full Model","text":"","category":"section"},{"location":"generated/full_fledged_schema_examples_new/composition/COVID_full_model/","page":"COVID Full Model","title":"COVID Full Model","text":"using GraphViz\n\nusing StockFlow\nusing StockFlow.Syntax\n\nusing Catlab\nusing Catlab.CategoricalAlgebra\nusing LabelledArrays\nusing OrdinaryDiffEq\nusing Plots\n\nusing Catlab.Graphics\nusing Catlab.Programs\nusing Catlab.WiringDiagrams\n\ndisplay_uwd(ex) = to_graphviz(ex, box_labels=:name, junction_labels=:variable, edge_attrs=Dict(:len=>\"1\"));\n\nseir = @stock_and_flow begin\n\n    :stocks\n    S\n    E\n    IA\n    IYU\n    IYN\n    R\n\n    :parameters\n    β\n    rLatent\n    rIncubation\n    rDevelop\n    rRecovery\n    rw\n\n    :dynamic_variables\n    v_NewIncidence₁ = β * NIC\n    v_NewIncidence₂ = v_NewIncidence₁ / N # λ\n    v_NewIncidence₃ = v_NewIncidence₂ * S\n\n\n    v_NewInfectious = E * rLatent\n    v_BecomingSymptomatic = IA * rIncubation\n    v_SymptomicsNotDevelopingComplications = IYU * rDevelop\n    v_NewRecovery = IYN * rRecovery\n    v_WaningImmunityR = R * rw\n\n    :flows\n    S => fNewIncidence(v_NewIncidence₃) => E\n    E => fNewInfectious(v_NewInfectious) => IA\n    IA => fBecomingSymptomatic(v_BecomingSymptomatic) => IYU\n    IYU => fSymptomicsNotDevelopingComplications(v_SymptomicsNotDevelopingComplications) => IYN\n    IYN => fNewRecovery(v_NewRecovery) => R\n    R => fWaningImmunityR(v_WaningImmunityR) => S\n\n\n\n    :sums\n    N = [S, E, IA, IYU, IYN, R]\n    NIC = [IA, IYU, IYN]\n    NI = [IA, IYU, IYN]\n\nend\n\n\nGraphF(seir)\n\nv = @stock_and_flow begin\n    :stocks\n    S\n    E\n    VP\n    VF\n\n\n    :parameters\n    rv\n    rw\n    λ\n    eP_complement # 1.0 - eP\n    eF_complement # 1.0 - eF\n\n\n    :dynamic_variables\n    v_NewIncidenceVP = VP * eP_complement\n    v_NewIncidenceVF = VF * eF_complement\n\n    v_infVP = v_NewIncidenceVP * λ\n    v_infVF = v_NewIncidenceVF * λ\n\n\n    :flows\n    S => fFirstdoseVaccine(S * rv) => VP\n    VP => fWaningImmunityVP(VP * rw) => S\n    VP => fSeconddoseVaccine(VP * rv) => VF\n    VF => fWaningImmunityVF(VF * rw) => VP\n    VP => fNewIncidenceVP(v_infVP) => E\n    VF => fNewIncidenceVF(v_infVF) => E\n\n\n\n    :sums\n    N = [S, E, VP, VF]\n    NIC = []\nend\n\nGraphF(v;rd=\"TB\")\n\nia = @stock_and_flow begin\n    :stocks\n    IA\n    IA2\n    IA3\n    R\n\n    :parameters\n    rIncubationIA\n    rDevelopIA2\n    rRecoveryIA3\n\n    :flows\n    IA => fDevelopmentOfPersistentAsymptomaticity(IA * rIncubationIA) => IA2\n    IA2 => fProgressionIA2_IA3(IA2 * rDevelopIA2) => IA3\n    IA3 => fNewrecoveryIA3(IA3 * rRecoveryIA3) => R\n\n    :sums\n    N = [IA, IA2, IA3, R]\n    NIC = [IA, IA2, IA3]\n    NI = [IA, IA2, IA3]\nend\n\nGraphF(ia)\n\nh = @stock_and_flow begin\n    :stocks\n     IYU\n     HICU\n     HNICU\n     R\n     D\n\n     :parameters\n     rAdmICU\n     rAdmNICU\n     rOutICU\n     rrH\n     rDeathICU\n     rDeathNICU\n\n     :dynamic_variables\n     v_HICUAdmission = IYU * rAdmICU\n     v_HNICUAdmission = IYU * rAdmNICU\n     v_OutICU = HICU * rOutICU\n     v_RecoveryH = HNICU * rrH\n     v_NewDeathsHICU = HICU * rDeathICU\n     v_NewDeathsHNICU = HNICU * rDeathNICU\n\n     :flows\n     IYU => f_HICUAdmission(v_HICUAdmission) => HICU\n     IYU => f_HNICUAdmission(v_HNICUAdmission) => HNICU\n     HICU => f_OutICU(v_OutICU) => HNICU\n     HNICU => f_RecoveryH(v_RecoveryH) => R\n     HICU => f_NewDeathsHICU(v_NewDeathsHICU) => D\n     HNICU => f_NewDeathsHNICU(v_NewDeathsHNICU) => D\n\n     :sums\n     N = [IYU, HICU, HNICU, R]\n     NIC = [IYU]\n     NI = [IYU, HICU, HNICU]\n\n\n end\n\nGraphF(h;rd=\"TB\")\n\nfootIYUN=foot(:IYU, (:NI,:NIC,:N), (:IYU=>:NI, :IYU=>:NIC, :IYU=>:N))\nGraphF(footIYUN;schema=\"C0\")\n\nfootRN=foot(:R, :N, :R=>:N)\nGraphF(footRN;schema=\"C0\")\n\n\nfootIAN=foot(:IA, (:NI,:NIC,:N), (:IA=>:NI, :IA=>:NIC, :IA=>:N))\nGraphF(footIAN;schema=\"C0\")\n\nfootSN=foot(:S, :N, :S=>:N)\nGraphF(footSN;schema=\"C0\")\n\nfootEN=foot(:E, :N, :E=>:N)\nGraphF(footEN;schema=\"C0\")\n\nfootNIC=foot((),:NIC,())\nGraphF(footNIC;schema=\"C0\")\n\ncovid = @relation (footSN, footEN, footIAN, footIYUN, footRN, footNIC) begin\n    modelA(footSN, footEN, footIAN, footIYUN, footRN, footNIC)\n    modelB(footSN, footEN, footNIC)\n    modelC(footIAN, footRN)\n    modelD(footIYUN, footRN)\nend;\ndisplay_uwd(covid)\n\nopen_modelA=Open(seir, footSN, footEN, footIAN, footIYUN, footRN, footNIC)\nopen_modelB=Open(v,footSN,footEN, footNIC)\nopen_modelC=Open(ia,footIAN,footRN)\nopen_modelD=Open(h,footIYUN,footRN)","category":"page"},{"location":"generated/full_fledged_schema_examples_new/composition/COVID_full_model/","page":"COVID Full Model","title":"COVID Full Model","text":"Compose those three models according the UWD-algebra","category":"page"},{"location":"generated/full_fledged_schema_examples_new/composition/COVID_full_model/","page":"COVID Full Model","title":"COVID Full Model","text":"openCOVID19 = oapply(covid, [open_modelA, open_modelB, open_modelC, open_modelD])","category":"page"},{"location":"generated/full_fledged_schema_examples_new/composition/COVID_full_model/","page":"COVID Full Model","title":"COVID Full Model","text":"composed model","category":"page"},{"location":"generated/full_fledged_schema_examples_new/composition/COVID_full_model/","page":"COVID Full Model","title":"COVID Full Model","text":"COVID19=apex(openCOVID19)\n\nGraphF(COVID19)\n\nL = @stock_and_flow begin\n    :stocks\n    VP\n    VF\n    E\n\n    :parameters\n    eP_complement\n    eF_complement\n    λ\n    β\n\n\n    :flows\n    VP => fNewIncidenceVP(v_infVP) => E\n    VF => fNewIncidenceVF(v_infVF) => E\n\n    :dynamic_variables\n    v_NewIncidence₁ = β * NIC\n    v_NewIncidence₂ = v_NewIncidence₁ / N # λ\n\n    v_NewIncidenceVP = VP * eP_complement\n    v_NewIncidenceVF = VF * eF_complement\n\n    v_infVP = v_NewIncidenceVP * λ\n    v_infVF = v_NewIncidenceVF * λ\n\n\n    :sums\n    N = [VP, VF, E]\n    NIC = []\nend;\n\nGraphF(L)\n\nI = @stock_and_flow begin\n    :stocks\n    VP\n    VF\n    E\n\n    :parameters\n    eP_complement\n    eF_complement\n    β\n\n    :flows\n    VP => fNewIncidenceVP(v_infVP) => E\n    VF => fNewIncidenceVF(v_infVF) => E\n\n    :dynamic_variables\n    v_NewIncidence₁ = β * NIC\n    v_NewIncidence₂ = v_NewIncidence₁ / N # λ\n    v_NewIncidenceVP = VP * eP_complement\n    v_NewIncidenceVF = VF * eF_complement\n\n\n    v_infVP = *(v_NewIncidenceVP)\n    v_infVF = *(v_NewIncidenceVF)\n\n    :sums\n    N = [VP, VF, E]\n    NIC = []\nend;\n\nGraphF(I)\n\nR = @stock_and_flow begin\n    :stocks\n    VP\n    VF\n    E\n\n    :parameters\n    eP_complement\n    eF_complement\n    β\n\n    :flows\n    VP => fNewIncidenceVP(v_infVP) => E\n    VF => fNewIncidenceVF(v_infVF) => E\n\n    :dynamic_variables\n    v_NewIncidence₁ = β * NIC\n    v_NewIncidence₂ = v_NewIncidence₁ / N # λ\n\n    v_NewIncidenceVP = VP * eP_complement\n    v_NewIncidenceVF = VF * eF_complement\n\n\n    v_infVP = v_NewIncidenceVP * v_NewIncidence₂\n    v_infVF = v_NewIncidenceVF * v_NewIncidence₂\n\n\n    :sums\n    N = [VP, VF, E]\n    NIC = []\nend;\n\nGraphF(R)\n\nusing AlgebraicRewriting\nusing AlgebraicRewriting: rewrite\nconst hom = Catlab.CategoricalAlgebra.homomorphism\n\nrule = Rule(hom(I,L), hom(I,R))\n\nCovid19_rewritten = rewrite(rule, COVID19)\nGraphF(Covid19_rewritten)\n\nCovid19_rewritten\n\nGraphF(Covid19_rewritten; type=\"SF\", rd=\"TB\")","category":"page"},{"location":"generated/full_fledged_schema_examples_new/composition/COVID_full_model/","page":"COVID Full Model","title":"COVID Full Model","text":"define constant parameters","category":"page"},{"location":"generated/full_fledged_schema_examples_new/composition/COVID_full_model/","page":"COVID Full Model","title":"COVID Full Model","text":"p_COVID19_raw = LVector(\n    β=0.8, tLatent=2.9, tIncubation=2.72, tDevelop=6.0, tRecovery=3.5,tw=2*365.0,\n    fH=0.002, fICU=0.23, tICU=6.0, tH = 12.0, tOutICU=6.0, fractionIA=0.4\n)\n\n\np_COVID19 = LVector(\n    β=p_COVID19_raw.β, rLatent=1.0/p_COVID19_raw.tLatent, rIncubation=(1.0-p_COVID19_raw.fractionIA)/p_COVID19_raw.tIncubation,\n    rDevelop=(1.0-p_COVID19_raw.fH)/p_COVID19_raw.tDevelop, rRecovery=1.0/p_COVID19_raw.tRecovery, rw=1.0/p_COVID19_raw.tw,\n    rv=0.01, eP=0.6, eF=0.85, rIncubationIA=p_COVID19_raw.fractionIA/p_COVID19_raw.tIncubation,\n    rDevelopIA2=1.0/p_COVID19_raw.tDevelop, rRecoveryIA3=1.0/p_COVID19_raw.tRecovery,\n    rAdmICU=p_COVID19_raw.fH*p_COVID19_raw.fICU/p_COVID19_raw.tDevelop,\n    rAdmNICU=p_COVID19_raw.fH*(1.0-p_COVID19_raw.fICU)/p_COVID19_raw.tDevelop,\n    rrH=1.0/p_COVID19_raw.tH, rOutICU=1.0/p_COVID19_raw.tOutICU,rDeathICU=0.085, rDeathNICU=0.018,\n    eP_complement = 0.4, eF_complement = 0.15\n)","category":"page"},{"location":"generated/full_fledged_schema_examples_new/composition/COVID_full_model/","page":"COVID Full Model","title":"COVID Full Model","text":"define initial values for stocks","category":"page"},{"location":"generated/full_fledged_schema_examples_new/composition/COVID_full_model/","page":"COVID Full Model","title":"COVID Full Model","text":"u0_COVID19 = LVector(\n    S=38010000.0, E=0.0, IYU=10.0, IA=0.0, R=0.0, HICU=0.0, HNICU=0.0, VP=0.0, VF=0.0,\n    D=0.0, IA2=0.0, IA3=0.0, IYN=0.0\n)","category":"page"},{"location":"generated/full_fledged_schema_examples_new/composition/COVID_full_model/","page":"COVID Full Model","title":"COVID Full Model","text":"results are tested the same as the Anylogic model","category":"page"},{"location":"generated/full_fledged_schema_examples_new/composition/COVID_full_model/","page":"COVID Full Model","title":"COVID Full Model","text":"prob_COVID19 = ODEProblem(vectorfield(Covid19_rewritten),u0_COVID19,(0.0,100.0),p_COVID19);\nsol_COVID19 = solve(prob_COVID19,Tsit5(),abstol=1e-8);\nplot(sol_COVID19)","category":"page"},{"location":"generated/full_fledged_schema_examples_new/composition/COVID_full_model/","page":"COVID Full Model","title":"COVID Full Model","text":"to have the figures plotted fix to the wider of the cells","category":"page"},{"location":"generated/full_fledged_schema_examples_new/composition/COVID_full_model/","page":"COVID Full Model","title":"COVID Full Model","text":"HTML(\"\"\"\n<style>\n.output_svg div{\n  width: 100% !important;\n  height: 100% !important;\n}\n</style>\n\"\"\")","category":"page"},{"location":"generated/full_fledged_schema_examples_new/composition/curable_sexually_transmitted_diseases_model/","page":"Curable Sexually-Transmitted Diseases Model","title":"Curable Sexually-Transmitted Diseases Model","text":"EditURL = \"../../../../literate/full_fledged_schema_examples_new/composition/curable_sexually_transmitted_diseases_model.jl\"","category":"page"},{"location":"generated/full_fledged_schema_examples_new/composition/curable_sexually_transmitted_diseases_model/#Curable-Sexually-Transmitted-Diseases-Model","page":"Curable Sexually-Transmitted Diseases Model","title":"Curable Sexually-Transmitted Diseases Model","text":"","category":"section"},{"location":"generated/full_fledged_schema_examples_new/composition/curable_sexually_transmitted_diseases_model/","page":"Curable Sexually-Transmitted Diseases Model","title":"Curable Sexually-Transmitted Diseases Model","text":"using GraphViz\n\nusing StockFlow\nusing StockFlow.Syntax\n\nusing Catlab\nusing Catlab.CategoricalAlgebra\nusing LabelledArrays\nusing OrdinaryDiffEq\nusing Plots\n\nusing Catlab.Graphics\nusing Catlab.Programs\nusing Catlab.Theories\nusing Catlab.WiringDiagrams\n\nopenX = Open(\n    (@stock_and_flow begin\n\n        :stocks\n        X\n\n        :parameters\n        μ\n\n        :dynamic_variables\n        v_births = N * μ\n        v_deathX = X * μ\n\n        :flows\n        CLOUD => f_births(v_births) => X\n        X => f_deathX(v_deathX) => CLOUD\n\n        :sums\n        N = [X]\n\n        end\n    ),\n    # feet\n    foot(:X,:N,:X=>:N)\n\n)\n\nGraphF(apex(openX))","category":"page"},{"location":"generated/full_fledged_schema_examples_new/composition/curable_sexually_transmitted_diseases_model/","page":"Curable Sexually-Transmitted Diseases Model","title":"Curable Sexually-Transmitted Diseases Model","text":"going to compose all μ in Rewriting.  Shouldn't be necessary on params.","category":"page"},{"location":"generated/full_fledged_schema_examples_new/composition/curable_sexually_transmitted_diseases_model/","page":"Curable Sexually-Transmitted Diseases Model","title":"Curable Sexually-Transmitted Diseases Model","text":"openSIS_A = Open(\n    (@stock_and_flow begin\n\n        :stocks\n        X\n        A\n\n        :parameters\n        μ_temp1\n        ϕ_complement\n        σ′\n        cβ\n\n        :dynamic_variables\n        v_inf₁ = cβ * NI\n        v_inf₂ = v_inf₁ / N\n        v_inf₃ = v_inf₂ * X\n        v_inf₄ = v_inf₃ * ϕ_complement\n\n        v_deathA = A * μ_temp1\n\n        :flows\n        X => f_newInfectiousA(v_inf₄) => A\n        A => f_deathA(v_deathA) => CLOUD\n        A => f_recoveryA(A * σ′) => X\n\n        :sums\n        N = [X, A]\n        NI = [A]\n\n    end\n    ),\n     # feet\n     foot(:X,:N,:X=>:N),\n     foot((),:NI,())\n\n)\n\nGraphF(apex(openSIS_A))\n\nopenSIS_Y = Open(\n    (@stock_and_flow begin\n\n    :stocks\n    X\n    Y\n\n    :parameters\n    μ_temp2\n    ϕ\n    σ\n    λ\n\n    :dynamic_variables\n    v_inf₄ = ϕ * λ\n    # at present, lambda needs to come second\n    # in algebraic rewriting, position of variables matters for homomorphisms.\n    # When we later have *(ϕ), phi comes first, because it's the only variable\n\n    v_deathY = Y * μ_temp2\n\n    :flows\n    X => f_newInfectiousY(v_inf₄) => Y\n    Y => f_deathY(v_deathY) => CLOUD\n    Y => f_recoveryY(Y * σ) => X\n\n    :sums\n    N = [X, Y]\n    NI = [Y]\n\nend\n        ),\n\n     # feet\n     foot(:X,:N,:X=>:N),\n     foot((),:NI,())\n\n)\n\nGraphF(apex(openSIS_Y))","category":"page"},{"location":"generated/full_fledged_schema_examples_new/composition/curable_sexually_transmitted_diseases_model/","page":"Curable Sexually-Transmitted Diseases Model","title":"Curable Sexually-Transmitted Diseases Model","text":"define the UWD-algebra","category":"page"},{"location":"generated/full_fledged_schema_examples_new/composition/curable_sexually_transmitted_diseases_model/","page":"Curable Sexually-Transmitted Diseases Model","title":"Curable Sexually-Transmitted Diseases Model","text":"uwd = @relation (XN,NI) begin\n    X(XN)\n    XA(XN,NI)\n    XY(XN,NI)\nend;\ndisplay_uwd(uwd)\n\nXAY_model = oapply(uwd,Dict(\n    :X=>openX,\n    :XA=>openSIS_A,\n    :XY=>openSIS_Y\n    )) |> apex\nGraphF(XAY_model)\n\nXAY_model\n\nL = @stock_and_flow begin\n    :stocks\n    X\n    Y\n    A\n\n    :parameters\n    μ\n    μ_temp1\n    μ_temp2\n    λ\n    cβ\n    ϕ\n\n    :dynamic_variables\n    v_inf₁ = cβ * NI\n    v_inf₂ = v_inf₁ / N\n    v_inf₃ = v_inf₂ * X\n    v_inf₄ = ϕ * λ\n\n    v_deathA = A * μ_temp1\n    v_deathY = Y * μ_temp2\n\n    v_births = N * μ\n    v_deathX = X * μ\n\n    :flows\n    X => f_newInfectiousY(v_inf₄) => Y\n    Y => f_deathY(v_deathY) => CLOUD\n    A => f_deathA(v_deathA) => CLOUD\n\n    CLOUD => f_births(v_births) => X\n    X => f_deathX(v_deathX) => CLOUD\n\n\n\n    :sums\n    N = [X,Y,A]\n    NI = [Y,A]\n    end;\n\n\n\nGraphF(L)\n\nI = @stock_and_flow begin\n    :stocks\n    A\n    X\n    Y\n\n    :parameters\n    μ\n    cβ\n    ϕ\n\n    :dynamic_variables\n    v_inf₁ = cβ * NI\n    v_inf₂ = v_inf₁ / N\n    v_inf₃ = v_inf₂ * X\n    v_inf₄ = *(ϕ)\n\n\n    v_deathA = *(A)\n    v_deathY = *(Y)\n\n    v_births = N * μ\n    v_deathX = X * μ\n\n\n\n\n\n\n    :flows\n    X => f_newInfectiousY(v_inf₄) => Y\n    Y => f_deathY(v_deathY) => CLOUD\n    A => f_deathA(v_deathA) => CLOUD\n\n    CLOUD => f_births(v_births) => X\n    X => f_deathX(v_deathX) => CLOUD\n\n\n\n    :sums\n    N = [X,Y,A]\n    NI = [Y,A]\n    end;\n\n\n\n\nGraphF(I)\n\nR = @stock_and_flow begin\n    :stocks\n    A\n    X\n    Y\n\n    :parameters\n    μ\n    cβ\n    ϕ\n\n    :dynamic_variables\n    v_inf₁ = cβ * NI\n    v_inf₂ = v_inf₁ / N\n    v_inf₃ = v_inf₂ * X\n    v_inf₄ = ϕ * v_inf₃\n\n    v_deathA = A * μ\n    v_deathY = Y * μ\n\n    v_births = N * μ\n    v_deathX = X * μ\n\n    :flows\n    X => f_newInfectiousY(v_inf₄) => Y\n\n    Y => f_deathY(v_deathY) => CLOUD\n    A => f_deathA(v_deathA) => CLOUD\n\n    CLOUD => f_births(v_births) => X\n    X => f_deathX(v_deathX) => CLOUD\n\n\n    :sums\n    N = [X,Y,A]\n    NI = [Y,A]\n    end;\n\n\n\nGraphF(R)\n\nusing AlgebraicRewriting\nusing AlgebraicRewriting: rewrite\nconst hom = Catlab.CategoricalAlgebra.homomorphism\nrule = Rule(hom(I,L), hom(I,R))\n\nXAY_model_rewritten = rewrite(rule, XAY_model)\n\nGraphF(XAY_model_rewritten)\n\nGraphF(XAY_model_rewritten,type=\"SF\")","category":"page"},{"location":"generated/full_fledged_schema_examples_new/composition/curable_sexually_transmitted_diseases_model/","page":"Curable Sexually-Transmitted Diseases Model","title":"Curable Sexually-Transmitted Diseases Model","text":"define values of constant parameters unit: year","category":"page"},{"location":"generated/full_fledged_schema_examples_new/composition/curable_sexually_transmitted_diseases_model/","page":"Curable Sexually-Transmitted Diseases Model","title":"Curable Sexually-Transmitted Diseases Model","text":"p = LVector(\n    cβ=15*0.7, μ=1/15,ϕ=(0.95+0.4)/2,σ=12/4,σ′=12/4,ϕ_complement=(1.0 - ((0.95+0.4)/2))\n)","category":"page"},{"location":"generated/full_fledged_schema_examples_new/composition/curable_sexually_transmitted_diseases_model/","page":"Curable Sexually-Transmitted Diseases Model","title":"Curable Sexually-Transmitted Diseases Model","text":"define initial values for stocks","category":"page"},{"location":"generated/full_fledged_schema_examples_new/composition/curable_sexually_transmitted_diseases_model/","page":"Curable Sexually-Transmitted Diseases Model","title":"Curable Sexually-Transmitted Diseases Model","text":"u0 = LVector(\n    X=990, A=5, Y=5\n)","category":"page"},{"location":"generated/full_fledged_schema_examples_new/composition/curable_sexually_transmitted_diseases_model/","page":"Curable Sexually-Transmitted Diseases Model","title":"Curable Sexually-Transmitted Diseases Model","text":"results are tested the same as the Anylogic model","category":"page"},{"location":"generated/full_fledged_schema_examples_new/composition/curable_sexually_transmitted_diseases_model/","page":"Curable Sexually-Transmitted Diseases Model","title":"Curable Sexually-Transmitted Diseases Model","text":"prob_XAY = ODEProblem(vectorfield(XAY_model_rewritten),u0,(0.0,2.0),p);\nsol = solve(prob_XAY,Tsit5(),abstol=1e-8);\nplot(sol)","category":"page"},{"location":"generated/full_fledged_schema_examples_new/composition/curable_sexually_transmitted_diseases_model/","page":"Curable Sexually-Transmitted Diseases Model","title":"Curable Sexually-Transmitted Diseases Model","text":"to have the figures plotted fix to the wider of the cells","category":"page"},{"location":"generated/full_fledged_schema_examples_new/composition/curable_sexually_transmitted_diseases_model/","page":"Curable Sexually-Transmitted Diseases Model","title":"Curable Sexually-Transmitted Diseases Model","text":"HTML(\"\"\"\n<style>\n.output_svg div{\n  width: 100% !important;\n  height: 100% !important;\n}\n</style>\n\"\"\")","category":"page"},{"location":"generated/full_fledged_schema_examples_new/composition/diabetes_model/","page":"Diabetes Model","title":"Diabetes Model","text":"EditURL = \"../../../../literate/full_fledged_schema_examples_new/composition/diabetes_model.jl\"","category":"page"},{"location":"generated/full_fledged_schema_examples_new/composition/diabetes_model/#Diabetes-Model","page":"Diabetes Model","title":"Diabetes Model","text":"","category":"section"},{"location":"generated/full_fledged_schema_examples_new/composition/diabetes_model/","page":"Diabetes Model","title":"Diabetes Model","text":"using GraphViz\n\nusing StockFlow\nusing StockFlow.Syntax\n\nusing Catlab\nusing Catlab.CategoricalAlgebra\nusing LabelledArrays\nusing OrdinaryDiffEq\nusing Plots\n\nusing Catlab.Graphics\nusing Catlab.Programs\nusing Catlab.Theories\nusing Catlab.WiringDiagrams\n\ndisplay_uwd(ex) = to_graphviz(ex, box_labels=:name, junction_labels=:variable, edge_attrs=Dict(:len=>\"1\"));\n\nModel_Normoglycemic = @stock_and_flow begin\n\n    :stocks\n    NormalWeight\n    OverWeight\n    Obese\n\n    :parameters\n    rBirth\n    rMortalityWeight\n    rObese\n    rOverWeight\n    rMortalityobese\n\n    :flows\n    NormalWeight => f_DeathNormalWeight(NormalWeight * rMortalityWeight) => CLOUD\n    NormalWeight => f_BecomingOverWeight(NormalWeight * rOverWeight) => OverWeight\n    OverWeight => f_DeathOverWeight(OverWeight * rMortalityWeight) => CLOUD\n    OverWeight => f_BecomingObese(OverWeight * rObese) => Obese\n    Obese => f_DeathObese(Obese * rMortalityobese) => CLOUD\n    CLOUD => f_NewBorn(N * rBirth) => NormalWeight\n\n\n    :sums\n    N = [NormalWeight, OverWeight, Obese]\n\nend\n\nGraphF(Model_Normoglycemic, rd=\"TB\")\n\n++(s1, s2) = Symbol(string(s1) * string(s2)) # infix, and works with both strings and symbols\n\nfunction fOpenSubHyperglycemic(pop)\n\n    # The following are all symbols\n\n    Prediabetic = \"Prediabetic\" ++ pop\n    DevelopingDiabetic = \"DevelopingDiabetic\" ++ pop\n    DeathPrediabetic = \"DeathPrediabetic\" ++ pop\n    DiabeticWtComp = \"DiabeticWtComp\" ++ pop\n    DiabeticEarly = \"DiabeticEarly\" ++ pop\n    DevelopingEarly = \"DevelopingEarly\" ++ pop\n    DeathDiabeticWtComp = \"DeathDiabeticWtComp\" ++ pop\n    DevelopingLate = \"DevelopingLate\" ++ pop\n    DeathDiabeticEarly = \"DeathDiabeticEarly\" ++ pop\n    DiabeticLate = \"DiabeticLate\" ++ pop\n    DeathDiabeticLate = \"DeathDiabeticLate\" ++ pop\n\n    rDevelopingDiabetic = \"rDevelopingDiabetic\" ++ pop\n    rDevelopingEarly = \"rDevelopingEarly\" ++ pop\n    rMortalityDiabeticEarly = \"rMortalityDiabeticEarly\" ++ pop\n    rMortalityDiabeticWtComp = \"rMortalityDiabeticWtComp\" ++ pop\n\n    v_DevelopingDiabetic = \"v_DevelopingDiabetic\" ++ pop\n    v_DeathPrediabetic = \"v_DeathPrediabetic\" ++ pop\n    v_DevelopingEarly = \"v_DevelopingEarly\" ++ pop\n    v_DeathDiabeticWtComp = \"v_DeathDiabeticWtComp\" ++ pop\n    v_DevelopingLate = \"v_DevelopingLate\" ++ pop\n    v_DeathDiabeticEarly = \"v_DeathDiabeticEarly\" ++ pop\n    v_DeathDiabeticLate = \"v_DeathDiabeticLate\" ++ pop\n\n\n    rMortalityPrediabetic = :rMortalityPrediabetic\n    rMortalityDiabeticLate = :rMortalityDiabeticLate\n    rDevelopingLate = :rDevelopingLate\n\n        Open(\n        StockAndFlowF(\n\n            # stocks\n            # in, out, sums\n            (\n                Prediabetic => (:F_NONE, (DevelopingDiabetic, DeathPrediabetic), :N),\n                DiabeticWtComp => (DevelopingDiabetic, (DevelopingEarly, DeathDiabeticWtComp), :N),\n                DiabeticEarly => (DevelopingEarly, (DevelopingLate, DeathDiabeticEarly), :N),\n                DiabeticLate => (DevelopingLate, DeathDiabeticLate, :N)\n            ),\n\n            # parameters\n            (\n                rDevelopingDiabetic,\n                rMortalityPrediabetic,\n                rDevelopingEarly,\n                rMortalityDiabeticEarly,\n                rMortalityDiabeticLate,\n                rMortalityDiabeticWtComp,\n                rDevelopingLate\n            ),\n\n            # dynamic variables\n            (\n                v_DevelopingDiabetic => ((Prediabetic, rDevelopingDiabetic) => :*),\n                v_DeathPrediabetic => ((Prediabetic, rMortalityPrediabetic) => :*),\n                v_DevelopingEarly => ((DiabeticWtComp, rDevelopingEarly) => :*),\n                v_DeathDiabeticWtComp => ((DiabeticWtComp, rMortalityDiabeticWtComp) => :*),\n                v_DevelopingLate => ((DiabeticEarly, rDevelopingLate) => :*),\n                v_DeathDiabeticEarly => ((DiabeticEarly, rMortalityDiabeticEarly) => :*),\n                v_DeathDiabeticLate => ((DiabeticLate, rMortalityDiabeticLate) => :*),\n            ),\n\n            # flows\n            (\n                DevelopingDiabetic => v_DevelopingDiabetic,\n                DeathPrediabetic => v_DeathPrediabetic,\n                DevelopingEarly => v_DevelopingEarly,\n                DeathDiabeticWtComp => v_DeathDiabeticWtComp,\n                DevelopingLate => v_DevelopingLate,\n                DeathDiabeticEarly => v_DeathDiabeticEarly,\n                DeathDiabeticLate => v_DeathDiabeticLate\n            ),\n\n            # sums\n            (\n                :N\n            )\n\n        ),\n\n        # feet\n        foot(Prediabetic, :N, Prediabetic=>:N),\n        foot(DiabeticWtComp, :N, DiabeticWtComp=>:N),\n        foot(DiabeticEarly, :N, DiabeticEarly=>:N),\n        foot(DiabeticLate, :N, DiabeticLate=>:N)\n\n    )\nend\n\nfunction fOpensubDiagnosis(s)\n\n    # The following are all symbols\n\n    s_U = s ++ \"_U\"\n    s_D = s ++ \"_D\"\n\n    Diagnosis = \"Diagnosis\" ++ s\n    v_Diagnosis = \"v_Diagnosis\" ++ s\n\n    rs = \"r\" ++ s\n\n    Open(\n        StockAndFlowF(\n\n            # stocks\n            (\n                s_U => (:F_NONE, Diagnosis, :N),\n                s_D => (Diagnosis, :F_NONE, :N)\n            ),\n\n            # parameters\n            (\n                rs\n            ),\n\n            # dynamic variables\n            (\n                v_Diagnosis => ((s_U, rs) => :*)\n            ),\n\n            # flows\n            (\n                Diagnosis => v_Diagnosis\n            ),\n\n            # sums\n            (\n                :N\n            )\n\n        ),\n\n        # feet\n        foot(s_U, :N, s_U => :N),\n        foot(s_D, :N, s_D => :N)\n\n    )\n\nend","category":"page"},{"location":"generated/full_fledged_schema_examples_new/composition/diabetes_model/","page":"Diabetes Model","title":"Diabetes Model","text":"define the UWD-algebra of Hyperglycemic Model","category":"page"},{"location":"generated/full_fledged_schema_examples_new/composition/diabetes_model/","page":"Diabetes Model","title":"Diabetes Model","text":"hyperglycemic_uwd = @relation (Prediabetic_U,Prediabetic_D,DiabeticWtComp_U,DiabeticWtComp_D,DiabeticEarly_U,DiabeticEarly_D,DiabeticLate_U,DiabeticLate_D) begin\n    Undx(Prediabetic_U,DiabeticWtComp_U,DiabeticEarly_U,DiabeticLate_U)\n    Dx(Prediabetic_D,DiabeticWtComp_D,DiabeticEarly_D,DiabeticLate_D)\n    Prediabetic(Prediabetic_U,Prediabetic_D)\n    DiabeticWtComp(DiabeticWtComp_U,DiabeticWtComp_D)\n    DiabeticEarly(DiabeticEarly_U,DiabeticEarly_D)\n    DiabeticLate(DiabeticLate_U,DiabeticLate_D)\nend;\ndisplay_uwd(hyperglycemic_uwd)","category":"page"},{"location":"generated/full_fledged_schema_examples_new/composition/diabetes_model/","page":"Diabetes Model","title":"Diabetes Model","text":"generate the Hyperglycemic population model by composition","category":"page"},{"location":"generated/full_fledged_schema_examples_new/composition/diabetes_model/","page":"Diabetes Model","title":"Diabetes Model","text":"Model_Hyperglycemic=oapply(hyperglycemic_uwd,\n    [fOpenSubHyperglycemic(\"_U\"),fOpenSubHyperglycemic(\"_D\"),fOpensubDiagnosis(\"Prediabetic\"),fOpensubDiagnosis(\"DiabeticWtComp\"),fOpensubDiagnosis(\"DiabeticEarly\"),fOpensubDiagnosis(\"DiabeticLate\")]) |> apex\nGraphF(Model_Hyperglycemic)\n\nModel_Norm_Hyper = @stock_and_flow begin\n\n    :stocks\n    NormalWeight\n    OverWeight\n    Obese\n    Prediabetic_U\n    Prediabetic_D\n\n    :parameters\n    rRecovery\n    rIncidenceNW\n    rIncidenceOW\n    rIncidenceOB\n\n    :flows\n    Prediabetic_D => fRecoveryToOWFromDx(Prediabetic_D * rRecovery) => OverWeight\n    Prediabetic_D => fRecoveryToNWFromDx(Prediabetic_D * rRecovery) => NormalWeight\n    Prediabetic_D => fRecoveryToOBFromDx(Prediabetic_D * rRecovery) => Obese\n\n    NormalWeight => fDevelopingPrediabeticNW(NormalWeight * rIncidenceNW) => Prediabetic_U\n\n    Prediabetic_U => fRecoveryToOWFromUx(Prediabetic_U * rRecovery) => OverWeight\n    Prediabetic_U => fRecoveryToOBFromUx(Prediabetic_U * rRecovery) => Obese\n    Prediabetic_U => fRecoveryToNWFromUx(Prediabetic_U * rRecovery) => NormalWeight\n\n    OverWeight => fDevelopingPrediabeticOW(OverWeight * rIncidenceOW) => Prediabetic_U\n\n    Obese => fDevelopingPrediabeticOB(Obese * rIncidenceOB) => Prediabetic_U\n\n    :sums\n    N = [NormalWeight, OverWeight, Obese, Prediabetic_U, Prediabetic_D]\n\n\nend","category":"page"},{"location":"generated/full_fledged_schema_examples_new/composition/diabetes_model/","page":"Diabetes Model","title":"Diabetes Model","text":"define the UWD-algebra of Hyperglycemic Model","category":"page"},{"location":"generated/full_fledged_schema_examples_new/composition/diabetes_model/","page":"Diabetes Model","title":"Diabetes Model","text":"diabetes_uwd = @relation (NormalWeight,OverWeight,Obese,Prediabetic_U,Prediabetic_D) begin\n    Normoglycemic(NormalWeight,OverWeight,Obese)\n    Hyperglycemic(Prediabetic_U,Prediabetic_D)\n    Norm_Hyper(NormalWeight,OverWeight,Obese,Prediabetic_U,Prediabetic_D)\nend;\ndisplay_uwd(diabetes_uwd)\n\nDiabetes_Model = oapply(diabetes_uwd,Dict(\n    :Normoglycemic=>Open(Model_Normoglycemic,foot(:NormalWeight,:N,:NormalWeight=>:N),foot(:OverWeight,:N,:OverWeight=>:N),foot(:Obese,:N,:Obese=>:N)),\n    :Hyperglycemic=>Open(Model_Hyperglycemic,foot(:Prediabetic_U,:N,:Prediabetic_U=>:N),foot(:Prediabetic_D,:N,:Prediabetic_D=>:N)),\n    :Norm_Hyper=>Open(Model_Norm_Hyper,foot(:NormalWeight,:N,:NormalWeight=>:N),foot(:OverWeight,:N,:OverWeight=>:N),foot(:Obese,:N,:Obese=>:N),foot(:Prediabetic_U,:N,:Prediabetic_U=>:N),foot(:Prediabetic_D,:N,:Prediabetic_D=>:N))\n    )) |> apex\n\nGraphF(Diabetes_Model)\n\np = LVector(\n    rBirth=12.5/1000, rMortalityWeight=4.0/1000, rOverWeight=0.03, rObese=0.06, rMortalityobese=13.0/1000,\n    rDevelopingDiabetic_U=1.0/10.0, rDevelopingDiabetic_D=1.0/15.0, rMortalityPrediabetic=13.0/1000,\n    rDevelopingEarly_U=1.0/10.0, rDevelopingEarly_D=1.0/15.0, rMortalityDiabeticWtComp_U=0.03, rMortalityDiabeticWtComp_D=0.027,\n    rDevelopingLate=0.9, rMortalityDiabeticEarly_U=0.04+0.02, rMortalityDiabeticEarly_D=0.036+0.02,rMortalityDiabeticLate=0.04,\n    rPrediabetic=0.1, rDiabeticWtComp=0.24, rDiabeticEarly=0.4, rDiabeticLate=0.6, rRecovery=0.03,\n    rIncidenceNW=0.01, rIncidenceOW=0.017, rIncidenceOB=0.026\n)\nu0 = LVector(\n    NormalWeight=95811.0, OverWeight=27709.0, Obese=30770.0, Prediabetic_U=13615.0, Prediabetic_D=2000.0,\n    DiabeticWtComp_U=6396.0, DiabeticWtComp_D=3000.0, DiabeticEarly_U=0.0, DiabeticEarly_D=1200.0,\n    DiabeticLate_U=0.0, DiabeticLate_D=800.0\n)\n\n# results have been tested correct (same as the Anylogic model)\nprob_diabetes = ODEProblem(vectorfield(Diabetes_Model),u0,(0.0,100.0),p);\nsol_diabetes = solve(prob_diabetes,Tsit5(),abstol=1e-8);\nplot(sol_diabetes)\n\n# to have the figures plotted fix to the wider of the cells\nHTML(\"\"\"\n<style>\n.output_svg div{\n  width: 100% !important;\n  height: 100% !important;\n}\n</style>\n\"\"\")","category":"page"},{"location":"generated/Covid19_composition_model_in_paper/","page":"COVID-19 Composition Model","title":"COVID-19 Composition Model","text":"EditURL = \"../../literate/Covid19_composition_model_in_paper.jl\"","category":"page"},{"location":"generated/Covid19_composition_model_in_paper/#COVID-19-Composition-Model","page":"COVID-19 Composition Model","title":"COVID-19 Composition Model","text":"","category":"section"},{"location":"generated/Covid19_composition_model_in_paper/","page":"COVID-19 Composition Model","title":"COVID-19 Composition Model","text":"using StockFlow\n\nusing Catlab\nusing Catlab.CategoricalAlgebra\nusing LabelledArrays\nusing OrdinaryDiffEq\nusing Plots\n\nusing Catlab.Graphics\nusing Catlab.Programs\nusing Catlab.WiringDiagrams\n\ndisplay_uwd(ex) = to_graphviz(ex, box_labels=:name, junction_labels=:variable, edge_attrs=Dict(:len=>\"1\"));\nnothing #hide","category":"page"},{"location":"generated/Covid19_composition_model_in_paper/","page":"COVID-19 Composition Model","title":"COVID-19 Composition Model","text":"Define functions ϕ of flows in the SEIRH model","category":"page"},{"location":"generated/Covid19_composition_model_in_paper/","page":"COVID-19 Composition Model","title":"COVID-19 Composition Model","text":"fNewIncidence(u,p,t)=p.β*u.S*u.I/p.N\nfNewInfectious(u,p,t)=u.E*p.ri\nfNewRecovery(u,p,t)=u.I/p.tr * (1.0-p.fH )\nfWaningImmunityR(u,p,t)=u.R/p.tw\nfHICUAdmission(u,p,t) = u.I/p.tr * p.fH * p.fICU\nfHNICUAdmission(u,p,t) = u.I/p.tr * p.fH * (1.0-p.fICU)\nfOutICU(u,p,t) = u.HICU/p.tICU\nfRecoveryH(u,p,t)= u.HNICU/p.tH","category":"page"},{"location":"generated/Covid19_composition_model_in_paper/","page":"COVID-19 Composition Model","title":"COVID-19 Composition Model","text":"StockAndFlowp(stocks,               (flow=>function, upstream=>downstream) => stocks linked)","category":"page"},{"location":"generated/Covid19_composition_model_in_paper/","page":"COVID-19 Composition Model","title":"COVID-19 Composition Model","text":"seirh = StockAndFlowp((:S, :E, :I, :R, :HICU, :HNICU),\n   ((:NewIncidence=>fNewIncidence, :S=>:E) => (:S, :I),\n    (:NewInfectious=>fNewInfectious, :E=>:I) => :E,\n    (:NewRecovery=>fNewRecovery, :I=>:R) => :I,\n    (:WaningImmunityR=>fWaningImmunityR, :R=>:S) => :R,\n    (:HICUAdmission=>fHICUAdmission, :I=>:HICU) => :I,\n    (:HNICUAdmission=>fHNICUAdmission, :I=>:HNICU) => :I,\n    (:OutICU=>fOutICU, :HICU=>:HNICU) => :HICU,\n    (:RecoveryH=>fRecoveryH, :HNICU=>:R) => :HNICU))","category":"page"},{"location":"generated/Covid19_composition_model_in_paper/","page":"COVID-19 Composition Model","title":"COVID-19 Composition Model","text":"Graph(primitive stock-flow model, direction of the diagram - the default value is \"LR\" from left to right; users could also use \"TB\" from top to bottom) Graph(seirh)","category":"page"},{"location":"generated/Covid19_composition_model_in_paper/","page":"COVID-19 Composition Model","title":"COVID-19 Composition Model","text":"Define functions ϕ of flows in the Vaccine model","category":"page"},{"location":"generated/Covid19_composition_model_in_paper/","page":"COVID-19 Composition Model","title":"COVID-19 Composition Model","text":"fFirstdoseVaccine(u,p,t) = u.S * p.rv\nfSeconddoseVaccine(u,p,t) = u.VP * p.rv\nfWaningImmunityVP(u,p,t) = u.VP / p.tw\nfWaningImmunityVF(u,p,t) = u.VF / p.tw\nfNewIncidenceVP(u,p,t) = p.β*u.VP*u.I*(1.0-p.eP)/p.N\nfNewIncidenceVF(u,p,t) = p.β*u.VF*u.I*(1.0-p.eF)/p.N","category":"page"},{"location":"generated/Covid19_composition_model_in_paper/","page":"COVID-19 Composition Model","title":"COVID-19 Composition Model","text":"Stock and flow diagram of Vaccine model","category":"page"},{"location":"generated/Covid19_composition_model_in_paper/","page":"COVID-19 Composition Model","title":"COVID-19 Composition Model","text":"v = StockAndFlowp((:S, :E, :I, :VP, :VF),\n   ((:FirstdoseVaccine=>fFirstdoseVaccine, :S=>:VP) => :S,\n    (:SeconddoseVaccine=>fSeconddoseVaccine, :VP=>:VF) => :VP,\n    (:WaningImmunityVP=>fWaningImmunityVP, :VP=>:S) => :VP,\n    (:WaningImmunityVF=>fWaningImmunityVF, :VF=>:VP) => :VF,\n    (:NewIncidenceVP=>fNewIncidenceVP, :VP=>:E) => (:VP, :I),\n    (:NewIncidenceVF=>fNewIncidenceVF, :VF=>:E) => (:VF, :I)))","category":"page"},{"location":"generated/Covid19_composition_model_in_paper/","page":"COVID-19 Composition Model","title":"COVID-19 Composition Model","text":"Graph(v,\"TB\")","category":"page"},{"location":"generated/Covid19_composition_model_in_paper/","page":"COVID-19 Composition Model","title":"COVID-19 Composition Model","text":"Define functions ϕ of flows in the Persist Asymptomaticity model","category":"page"},{"location":"generated/Covid19_composition_model_in_paper/","page":"COVID-19 Composition Model","title":"COVID-19 Composition Model","text":"fNewPersistentAsymptomaticity(u,p,t) = u.E * p.ria\nfNewRecoveryIA(u,p,t) = u.IA / p.tr","category":"page"},{"location":"generated/Covid19_composition_model_in_paper/","page":"COVID-19 Composition Model","title":"COVID-19 Composition Model","text":"Stock and flow diagram of Persistent Asymptomaticity Model","category":"page"},{"location":"generated/Covid19_composition_model_in_paper/","page":"COVID-19 Composition Model","title":"COVID-19 Composition Model","text":"ia = StockAndFlowp((:E, :IA, :R),\n   ((:NewPersistentAsymptomaticity=>fNewPersistentAsymptomaticity, :E=>:IA) => :E,\n    (:NewRecoveryIA=>fNewRecoveryIA, :IA=>:R) => :IA))","category":"page"},{"location":"generated/Covid19_composition_model_in_paper/","page":"COVID-19 Composition Model","title":"COVID-19 Composition Model","text":"Graph(ia)","category":"page"},{"location":"generated/Covid19_composition_model_in_paper/","page":"COVID-19 Composition Model","title":"COVID-19 Composition Model","text":"covid = @relation (S, E, I, R) begin\n    modelA(S,E,I,R)\n    modelB(S,E,I)\n    modelC(E,R)\nend;\ndisplay_uwd(covid)","category":"page"},{"location":"generated/Covid19_composition_model_in_paper/","page":"COVID-19 Composition Model","title":"COVID-19 Composition Model","text":"Open three Stock and Flow Diagrams","category":"page"},{"location":"generated/Covid19_composition_model_in_paper/","page":"COVID-19 Composition Model","title":"COVID-19 Composition Model","text":"openseirh = Open(seirh, [:S], [:E], [:I], [:R])\nopenv = Open(v, [:S], [:E], [:I])\nopenia = Open(ia, [:E], [:R])","category":"page"},{"location":"generated/Covid19_composition_model_in_paper/","page":"COVID-19 Composition Model","title":"COVID-19 Composition Model","text":"Compose those three models according the UWD-algebra","category":"page"},{"location":"generated/Covid19_composition_model_in_paper/","page":"COVID-19 Composition Model","title":"COVID-19 Composition Model","text":"openCOVID19 = oapply(covid, [openseirh, openv, openia])","category":"page"},{"location":"generated/Covid19_composition_model_in_paper/","page":"COVID-19 Composition Model","title":"COVID-19 Composition Model","text":"Generate the composed model (Stock and Flow Diagram)","category":"page"},{"location":"generated/Covid19_composition_model_in_paper/","page":"COVID-19 Composition Model","title":"COVID-19 Composition Model","text":"COVID19 = apex(openCOVID19)","category":"page"},{"location":"generated/Covid19_composition_model_in_paper/","page":"COVID-19 Composition Model","title":"COVID-19 Composition Model","text":"Graph(COVID19)","category":"page"},{"location":"generated/Covid19_composition_model_in_paper/","page":"COVID-19 Composition Model","title":"COVID-19 Composition Model","text":"Define constant parameters","category":"page"},{"location":"generated/Covid19_composition_model_in_paper/","page":"COVID-19 Composition Model","title":"COVID-19 Composition Model","text":"p_COVID19 = LVector(\n    β=0.8, N=38010001.0, tr=12.22, tw=2*365.0,\n    fH=0.002, fICU=0.23, tICU=6.0, tH = 12.0,\n    rv=0.01, eP=0.6, eF=0.85, ri=0.207, ria=0.138\n)","category":"page"},{"location":"generated/Covid19_composition_model_in_paper/","page":"COVID-19 Composition Model","title":"COVID-19 Composition Model","text":"Define initial values for stocks","category":"page"},{"location":"generated/Covid19_composition_model_in_paper/","page":"COVID-19 Composition Model","title":"COVID-19 Composition Model","text":"u0_COVID19 = LVector(\n    S=38010000.0, E=0.0, I=1.0, IA=0.0, R=0.0, HICU=0.0, HNICU=0.0, VP=0.0, VF=0.0\n)","category":"page"},{"location":"generated/Covid19_composition_model_in_paper/","page":"COVID-19 Composition Model","title":"COVID-19 Composition Model","text":"Check the dependencies of links of all flows' functions checkfls(COVID19, u0COVID19, pCOVID19)","category":"page"},{"location":"generated/Covid19_composition_model_in_paper/","page":"COVID-19 Composition Model","title":"COVID-19 Composition Model","text":"Solve the ODEs","category":"page"},{"location":"generated/Covid19_composition_model_in_paper/","page":"COVID-19 Composition Model","title":"COVID-19 Composition Model","text":"prob_COVID19 = ODEProblem(vectorfield(COVID19),u0_COVID19,(0.0,300.0),p_COVID19);\nsol_COVID19 = solve(prob_COVID19,Tsit5(),abstol=1e-8);\nplot(sol_COVID19)","category":"page"},{"location":"generated/Covid19_composition_model_in_paper/","page":"COVID-19 Composition Model","title":"COVID-19 Composition Model","text":"Flow of FirstdoseVaccine","category":"page"},{"location":"generated/Covid19_composition_model_in_paper/","page":"COVID-19 Composition Model","title":"COVID-19 Composition Model","text":"ϕFirstdoseVaccine = map(x->fFirstdoseVaccine(sol_COVID19.u[x],p_COVID19,sol_COVID19.t[x]),collect(1:length(sol_COVID19.t)))","category":"page"},{"location":"generated/full_fledged_schema_examples_new/stratification/diabetes_diagnose/","page":"Diabetes Diagnose","title":"Diabetes Diagnose","text":"EditURL = \"../../../../literate/full_fledged_schema_examples_new/stratification/diabetes_diagnose.jl\"","category":"page"},{"location":"generated/full_fledged_schema_examples_new/stratification/diabetes_diagnose/#Diabetes-Diagnose","page":"Diabetes Diagnose","title":"Diabetes Diagnose","text":"","category":"section"},{"location":"generated/full_fledged_schema_examples_new/stratification/diabetes_diagnose/","page":"Diabetes Diagnose","title":"Diabetes Diagnose","text":"using GraphViz\n\nusing StockFlow\nusing StockFlow.Syntax\n\nusing Catlab\nusing Catlab.CategoricalAlgebra\nusing LabelledArrays\nusing OrdinaryDiffEq\nusing Plots\n\nusing Catlab.Graphics\nusing Catlab.Programs\nusing Catlab.WiringDiagrams\n\nusing Catlab.Graphics.Graphviz: Html\nusing Catlab.Graphics.Graphviz","category":"page"},{"location":"generated/full_fledged_schema_examples_new/stratification/diabetes_diagnose/","page":"Diabetes Diagnose","title":"Diabetes Diagnose","text":"Functions for graphing typed Petri nets","category":"page"},{"location":"generated/full_fledged_schema_examples_new/stratification/diabetes_diagnose/","page":"Diabetes Diagnose","title":"Diabetes Diagnose","text":"colors_vflow = [\"antiquewhite4\",\"antiquewhite\", \"gold\", \"saddlebrown\", \"slateblue\", \"blueviolet\", \"olive\"]\ncolors_s = [\"deeppink\",\"darkorchid\",\"darkred\",\"coral\"] # red series\ncolors_sv = [\"cornflowerblue\",\"cyan4\",\"cyan\",\"chartreuse\"] # green and blue series\ncolors_p = [\"gold\",\"gold4\",\"darkorange1\",\"lightgoldenrod\",\"goldenrod\"] # yellow and orange\n\nflatten(fname::Symbol) = \"$fname\"\n\nfunction flatten(fname::Tuple)\n    names = split(replace(string(fname), \"(\"=>\"\", \")\"=>\"\", \":\"=>\"\"), \",\")\n    for i in 1:length(names)\n        name = strip(names[i])\n        if name[1:2] == \"id\"\n            continue\n        end\n        return name\n    end\n    return \"id\"\nend\n\ndef_stock(typed_StockFlow::ACSetTransformation, colors) =\n  (p,s) -> (\"s$s\", Attributes(:label=>sname(p,s) isa Tuple where T ? Html(replace(string(sname(p,s)), \":\"=>\"\", \",\" => \"<BR/>\", \"(\"=>\"\", \")\"=>\"\")) : \"$(sname(p,s))\",\n                                     :shape=>\"square\",\n                                     :color=>\"black\",\n                                     :style=>\"filled\",\n                                     :fillcolor=>colors[typed_StockFlow[:S](s)]))\n\ndef_parameter(typed_StockFlow::ACSetTransformation, colors) =\n(p, pp) -> (\"p$pp\", Attributes(:label=>pname(p,pp) isa Tuple where T ? Html(replace(string(pname(p,pp)), \":\"=>\"\", \",\" => \"<BR/>\", \"(\"=>\"\", \")\"=>\"\")) : \"$(pname(p,pp))\",\n                                     :shape=>\"circle\",\n                                     :color=>colors[typed_StockFlow[:P](pp)],\n                                     :fontcolor=>colors[typed_StockFlow[:P](pp)]))\n\ndef_auxiliaryVF(typed_StockFlow::ACSetTransformation, colors)=\n  (p, v) -> (\"v$v\", Attributes(:label=>make_v_expr(p,v) isa Tuple where T ? Html(replace(string(make_v_expr(p,v)), \":\"=>\"\", \",\" => \"<BR/>\", \"(\"=>\"\", \")\"=>\"\")) : \"$(make_v_expr(p,v))\",\n                                          :shape=>\"plaintext\",\n                                          :fontcolor=>colors[typed_StockFlow[:V](v)]))\n\n\ndef_sumV(typed_StockFlow::ACSetTransformation, colors) =\n  (p, sv) -> (\"sv$sv\", Attributes(:label=>svname(p,sv) isa Tuple where T ? Html(replace(string(svname(p,sv)), \":\"=>\"\", \",\" => \"<BR/>\", \"(\"=>\"\", \")\"=>\"\")) : \"$(svname(p,sv))\",\n                                       :shape=>\"circle\",\n                                       :color=>\"black\",\n                                       :fillcolor=>colors[typed_StockFlow[:SV](sv)],\n                                       :style=>\"filled\"))\n\n\ndef_flow_V(typed_StockFlow::ACSetTransformation, colors)=\n  (p, us, ds, v, f) -> begin\n    labelfontsize = \"6\"\n    colorType = colors[typed_StockFlow[:F](f)]\n    color = \"$colorType\"*\":invis:\"*\"$colorType\"\n    arrowhead = \"none\"\n    splines = \"ortho\"\n    return ([us, \"v$v\"],Attributes(:label=>\"\", :labelfontsize=>labelfontsize, :color=>color, :arrowhead=>arrowhead, :splines=>splines)),\n           ([\"v$v\", ds],Attributes(:label=>Html(flatten(fname(p,f))), :labelfontsize=>labelfontsize, :color=>color, :splines=>splines))\nend\n\ndef_flow_noneV(typed_StockFlow::ACSetTransformation, colors)=\n  (p, us, ds, f) -> begin\n     colorType = colors[typed_StockFlow[:F](f)]\n     color = \"$colorType\"*\":invis:\"*\"$colorType\"\n     ([us, ds],Attributes(:label=>Html(flatten(fname(p,f))), :labelfontsize=>\"6\", :color=>color))\nend\n\ndef_flow_V(colors = colors_vflow)=\n  (p, us, ds, v, f) -> begin\n    labelfontsize = \"6\"\n    colorType = colors[f]\n    color = \"$colorType\"*\":invis:\"*\"$colorType\"\n    arrowhead = \"none\"\n    splines = \"ortho\"\n    return ([us, \"v$v\"],Attributes(:label=>\"\", :labelfontsize=>labelfontsize, :color=>color, :arrowhead=>arrowhead, :splines=>splines)),\n           ([\"v$v\", ds],Attributes(:label=>Html(flatten(fname(p,f))), :labelfontsize=>labelfontsize, :color=>color, :splines=>splines))\n\nend\n\ndef_flow_noneV(colors = colors_vflow)=\n  (p, us, ds, f) -> begin\n     colorType = colors[f]\n     color = \"$colorType\"*\":invis:\"*\"$colorType\"\n     ([us, ds],Attributes(:label=>Html(flatten(fname(p,f))), :labelfontsize=>\"6\", :color=>color))\nend\n\nGraphF_typed(typed_StockFlow::ACSetTransformation, colors_vflow = colors_vflow, colors_s = colors_s, colors_p = colors_p, colors_sv = colors_sv; schema::String=\"C\", type::String=\"SFVL\", rd::String=\"LR\") = GraphF(dom(typed_StockFlow),\n    make_stock = def_stock(typed_StockFlow, colors_s), make_auxiliaryV=def_auxiliaryVF(typed_StockFlow, colors_vflow), make_sumV=def_sumV(typed_StockFlow, colors_sv),\n    make_flow_V=def_flow_V(typed_StockFlow, colors_vflow), make_flow_noneV=def_flow_noneV(typed_StockFlow, colors_vflow),make_parameter=def_parameter(typed_StockFlow, colors_p),schema=schema, type=type, rd=rd\n)\n\ndiabetes_type = @stock_and_flow begin\n    :stocks\n    Pop\n\n    :parameters\n    rDeath\n    rProgress\n    rStrata\n\n    :dynamic_variables\n    v_death = rDeath * Pop\n    v_progress = rProgress * Pop\n    v_strata = rStrata * Pop\n\n    :flows\n    Pop => f_death(v_death) => CLOUD\n    Pop => f_progress(v_progress) => Pop\n    Pop => f_strata(v_strata) => Pop\n\n    :sums\n    N = [Pop]\n\nend\n\nGraphF(diabetes_type)\n\nGraphF_typed(id(diabetes_type))\n\ns, = parts(diabetes_type, :S)\nsv, = parts(diabetes_type, :SV)\nlsn, = parts(diabetes_type, :LS)\nf_death, f_progress, f_strata = parts(diabetes_type, :F)\ni_progress, i_strata = parts(diabetes_type, :I)\no_death, o_progress, o_strata = parts(diabetes_type, :O)\nv_death, v_progress, v_strata = parts(diabetes_type, :V)\nlv_death, lv_progress, lv_strata = parts(diabetes_type, :LV)\np_death, p_progress, p_strata = parts(diabetes_type, :P)\nlpv_death, lpv_progress, lpv_strata = parts(diabetes_type, :LPV)","category":"page"},{"location":"generated/full_fledged_schema_examples_new/stratification/diabetes_diagnose/","page":"Diabetes Diagnose","title":"Diabetes Diagnose","text":"remove names to allow for the loose ACSet transform to be natural","category":"page"},{"location":"generated/full_fledged_schema_examples_new/stratification/diabetes_diagnose/","page":"Diabetes Diagnose","title":"Diabetes Diagnose","text":"diabetes_type = map(diabetes_type, Name=name->nothing, Op = op -> nothing, Position = pos -> nothing);\n\ndiagnosis_strata = @stock_and_flow begin\n\n    :stocks\n    U\n    D\n\n    :dynamic_variables\n    v_death_U = rDeath_U * U\n    v_progress_U = rProgress_U * U\n    v_death_D = rDeath_D * D\n    v_progress_D = rProgress_D * D\n    v_strata = rDiagnosis * U\n\n    :parameters\n    rDeath_U\n    rProgress_U\n\n    rDeath_D\n    rProgress_D\n\n    rDiagnosis\n\n\n\n    :flows\n    U => f_death_U(v_death_U) => CLOUD\n    U => f_progress_U(v_progress_U) => U\n\n    D => f_death_D(v_death_D) => CLOUD\n    D => f_progress_D(v_progress_D) => D\n\n    U => f_strata(v_strata) => D\n\n\n    :sums\n    N = [U, D]\n\n\nend\n\nGraphF(diagnosis_strata)\n\ntyped_diagnosis_strata=ACSetTransformation(diagnosis_strata, diabetes_type,\n  S = [s, s],\n  SV = [sv],\n  LS = [lsn, lsn],\n  F = [f_death, f_progress, f_death, f_progress, f_strata],\n  I = [i_progress, i_progress, i_strata],\n  O = [o_death, o_progress, o_strata, o_death, o_progress],\n  V = [v_death, v_progress, v_death, v_progress, v_strata],\n  LV = [lv_death, lv_progress, lv_death, lv_progress, lv_strata],\n  P = [p_death, p_progress, p_death, p_progress, p_strata],\n  LPV = [lpv_death, lpv_progress, lpv_death, lpv_progress, lpv_strata],\n Name=name->nothing, Op = op -> nothing, Position = pos -> nothing\n)\n\n@assert is_natural(typed_diagnosis_strata)\n\nGraphF_typed(typed_diagnosis_strata)\n\ndiabetes_progress = @stock_and_flow begin\n    :stocks\n    PreDiabetic\n    DiabeticWtComp\n    DiabeticEarly\n    DiabeticLate\n\n    :parameters\n\n    rDevelopingDiabetic\n    rDevelopingEarly\n    rDevelopingLate\n\n    rMortalityPreDiabetic\n    rMortalityDiabeticEarly\n    rMortalityDiabeticLate\n    rMortalityDiabeticWtComp\n\n\n    rDiagnosePreDiabetic\n    rDiagnoseDiabeticWtComp\n    rDiagnoseDiabeticEarly\n    rDiagnoseDiabeticLate\n\n    :dynamic_variables\n    v_DevelopingDiabetic = PreDiabetic * rDevelopingDiabetic\n    v_DevelopingEarly = DiabeticWtComp * rDevelopingEarly\n    v_DevelopingLate = DiabeticEarly * rDevelopingLate\n\n    v_DeathPreDiabetic = PreDiabetic * rMortalityPreDiabetic\n    v_DeathDiabeticWtComp = DiabeticWtComp * rMortalityDiabeticWtComp\n    v_DeathDiabeticEarly = DiabeticEarly * rMortalityDiabeticEarly\n    v_DeathDiabeticLate = DiabeticLate * rMortalityDiabeticLate\n\n    v_DiagnosePreDiabetic = PreDiabetic * rDiagnosePreDiabetic\n    v_DiagnoseDiabeticWtComp = DiabeticWtComp * rDiagnoseDiabeticWtComp\n    v_DiagnoseDiabeticEarly = DiabeticEarly * rDiagnoseDiabeticEarly\n    v_DiagnoseDiabeticLate = DiabeticLate * rDiagnoseDiabeticLate\n\n    :flows\n    PreDiabetic => f_DevelopingDiabetic(v_DevelopingDiabetic) => DiabeticWtComp\n    PreDiabetic => f_DeathPreDiabetic(v_DeathPreDiabetic) => CLOUD\n    DiabeticWtComp => f_DevelopingEarly(v_DevelopingEarly) => DiabeticEarly\n    DiabeticWtComp => f_DeathDiabeticWtComp(v_DeathDiabeticWtComp) => CLOUD\n    DiabeticEarly => f_DevelopingLate(v_DevelopingLate) => DiabeticLate\n    DiabeticEarly => f_DeathDiabeticEarly(v_DeathDiabeticEarly) => CLOUD\n    DiabeticLate => f_DeathDiabeticLate(v_DeathDiabeticLate) => CLOUD\n\n    PreDiabetic => f_DiagnosePreDiabetic(v_DiagnosePreDiabetic) => PreDiabetic\n    DiabeticWtComp => f_DiagnoseDiabeticWtComp(v_DiagnoseDiabeticWtComp) => DiabeticWtComp\n    DiabeticEarly => f_DiagnoseDiabeticEarly(v_DiagnoseDiabeticEarly) => DiabeticEarly\n    DiabeticLate => f_DiagnoseDiabeticLate(v_DiagnoseDiabeticLate) => DiabeticLate\n\n    :sums\n    N = [PreDiabetic, DiabeticWtComp, DiabeticEarly, DiabeticLate]\n\nend\n\ntyped_diabetes_progress=ACSetTransformation(diabetes_progress, diabetes_type,\n  S = [s, s, s, s],\n  SV = [sv],\n  LS = [lsn, lsn, lsn, lsn],\n  F = [f_progress, f_death, f_progress, f_death, f_progress, f_death, f_death, f_strata, f_strata, f_strata, f_strata],\n  I = [i_strata, i_progress, i_strata, i_progress, i_strata, i_progress, i_strata],\n  O = [o_progress, o_death, o_strata, o_progress, o_death, o_strata, o_progress, o_death, o_strata, o_death, o_strata],\n  V = [v_progress, v_progress, v_progress, v_death, v_death, v_death, v_death, v_strata, v_strata, v_strata, v_strata],\n  P = [p_progress, p_progress, p_progress, p_death, p_death, p_death, p_death, p_strata, p_strata, p_strata, p_strata],\n  LV = [lv_progress, lv_progress, lv_progress, lv_death, lv_death, lv_death, lv_death, lv_strata, lv_strata, lv_strata, lv_strata],\n  LPV = [lpv_progress, lpv_progress, lpv_progress, lpv_death, lpv_death, lpv_death, lpv_death, lpv_strata, lpv_strata, lpv_strata, lpv_strata],\n Name=name->nothing, Op = op -> nothing, Position = pos -> nothing\n\n)\n\n\n\n@assert is_natural(typed_diabetes_progress)\n\nGraphF_typed(typed_diabetes_progress)\n\nstrat_model = pullback(typed_diagnosis_strata, typed_diabetes_progress)\napex(strat_model)\n\nstratify(typed_model1, typed_model2) = ob(pullback(typed_model1, typed_model2))\n\ntyped_stratify(typed_model1, typed_model2) =\n  compose(proj1(pullback(typed_model1, typed_model2)), typed_model1);\n\ntyped_stratified_model = typed_stratify(typed_diagnosis_strata, typed_diabetes_progress)\nGraphF_typed(typed_stratified_model)","category":"page"},{"location":"generated/full_fledged_schema_examples_new/stratification/diabetes_diagnose/","page":"Diabetes Diagnose","title":"Diabetes Diagnose","text":"to have the figures plotted fix to the wider of the cells","category":"page"},{"location":"generated/full_fledged_schema_examples_new/stratification/diabetes_diagnose/","page":"Diabetes Diagnose","title":"Diabetes Diagnose","text":"HTML(\"\"\"\n<style>\n.output_svg div{\n  width: 100% !important;\n  height: 100% !important;\n}\n</style>\n\"\"\")","category":"page"},{"location":"practices/SEIRVD/SEIRVD_model_hard/#Problem:-SEIRVD-Model","page":"Problem: SEIRVD Model","title":"Problem: SEIRVD Model","text":"","category":"section"},{"location":"practices/SEIRVD/SEIRVD_model_hard/","page":"Problem: SEIRVD Model","title":"Problem: SEIRVD Model","text":"using StockFlow\n\nusing Catlab\nusing Catlab.CategoricalAlgebra\nusing LabelledArrays\nusing OrdinaryDiffEq\nusing Plots\n\nusing Catlab.Graphics\nusing Catlab.Programs\nusing Catlab.WiringDiagrams","category":"page"},{"location":"practices/SEIRVD/SEIRVD_model_hard/","page":"Problem: SEIRVD Model","title":"Problem: SEIRVD Model","text":"To build the SEIRVD stock and flow diagram model: (Image: SEIRVD_composed_model.png) By composing three sub-components.","category":"page"},{"location":"practices/SEIRVD/SEIRVD_model_hard/#Step-1:-Define-Stock-and-Flow-Diagrams-for-the-sub-components","page":"Problem: SEIRVD Model","title":"Step 1: Define Stock and Flow Diagrams for the sub-components","text":"","category":"section"},{"location":"practices/SEIRVD/SEIRVD_model_hard/#.1-Define-SEIR-model","page":"Problem: SEIRVD Model","title":"1.1 Define SEIR model","text":"","category":"section"},{"location":"practices/SEIRVD/SEIRVD_model_hard/","page":"Problem: SEIRVD Model","title":"Problem: SEIRVD Model","text":"Model 1: SEIR model (Image: SEIR_submodel.png)","category":"page"},{"location":"practices/SEIRVD/SEIRVD_model_hard/","page":"Problem: SEIRVD Model","title":"Problem: SEIRVD Model","text":"The functions of flows are given by:","category":"page"},{"location":"practices/SEIRVD/SEIRVD_model_hard/","page":"Problem: SEIRVD Model","title":"Problem: SEIRVD Model","text":"finc(u,p,t)=p.cβ*u.S*u.I/p.N\nfinf(u,p,t)=u.E * p.rlatent\nfrec(u,p,t)=u.I * p.rrec","category":"page"},{"location":"practices/SEIRVD/SEIRVD_model_hard/","page":"Problem: SEIRVD Model","title":"Problem: SEIRVD Model","text":"Now, please define the stock and flow diagram of the SEIR model:","category":"page"},{"location":"practices/SEIRVD/SEIRVD_model_hard/","page":"Problem: SEIRVD Model","title":"Problem: SEIRVD Model","text":"# StockAndFlowp(stocks,\n#               (flow=>function, upstream=>downstream) => stocks linked)","category":"page"},{"location":"practices/SEIRVD/SEIRVD_model_hard/","page":"Problem: SEIRVD Model","title":"Problem: SEIRVD Model","text":"You can plot the define stock and flow diagram by call function: Graph()","category":"page"},{"location":"practices/SEIRVD/SEIRVD_model_hard/","page":"Problem: SEIRVD Model","title":"Problem: SEIRVD Model","text":"Graph()","category":"page"},{"location":"practices/SEIRVD/SEIRVD_model_hard/#.2-Define-the-SV-model","page":"Problem: SEIRVD Model","title":"1.2 Define the SV model","text":"","category":"section"},{"location":"practices/SEIRVD/SEIRVD_model_hard/","page":"Problem: SEIRVD Model","title":"Problem: SEIRVD Model","text":"Model 2: SV model (simulates the vaccination process): (Image: SV_submodel.png)","category":"page"},{"location":"practices/SEIRVD/SEIRVD_model_hard/","page":"Problem: SEIRVD Model","title":"Problem: SEIRVD Model","text":"The function of flow vac is given","category":"page"},{"location":"practices/SEIRVD/SEIRVD_model_hard/","page":"Problem: SEIRVD Model","title":"Problem: SEIRVD Model","text":"fvac(u,p,t)=u.S * p.rv","category":"page"},{"location":"practices/SEIRVD/SEIRVD_model_hard/","page":"Problem: SEIRVD Model","title":"Problem: SEIRVD Model","text":"Now, please define the stock and flow diagram and plot it","category":"page"},{"location":"practices/SEIRVD/SEIRVD_model_hard/","page":"Problem: SEIRVD Model","title":"Problem: SEIRVD Model","text":"# StockAndFlowp(stocks,\n#               (flow=>function, upstream=>downstream) => stocks linked)","category":"page"},{"location":"practices/SEIRVD/SEIRVD_model_hard/#.3-Define-the-ID-model","page":"Problem: SEIRVD Model","title":"1.3 Define the ID model","text":"","category":"section"},{"location":"practices/SEIRVD/SEIRVD_model_hard/","page":"Problem: SEIRVD Model","title":"Problem: SEIRVD Model","text":"Model 3: ID model (simulates the deaths due to infected disese) (Image: ID_submodel.png)","category":"page"},{"location":"practices/SEIRVD/SEIRVD_model_hard/","page":"Problem: SEIRVD Model","title":"Problem: SEIRVD Model","text":"fdeath(u,p,t)=u.I * p.rd","category":"page"},{"location":"practices/SEIRVD/SEIRVD_model_hard/","page":"Problem: SEIRVD Model","title":"Problem: SEIRVD Model","text":"Now, please define the stock and flow diagram and plot it","category":"page"},{"location":"practices/SEIRVD/SEIRVD_model_hard/","page":"Problem: SEIRVD Model","title":"Problem: SEIRVD Model","text":"# StockAndFlowp(stocks,\n#               (flow=>function, upstream=>downstream) => stocks linked)","category":"page"},{"location":"practices/SEIRVD/SEIRVD_model_hard/#Step-2:-Define-the-UWD-algebra-composition-rule","page":"Problem: SEIRVD Model","title":"Step 2: Define the UWD-algebra composition rule","text":"","category":"section"},{"location":"practices/SEIRVD/SEIRVD_model_hard/","page":"Problem: SEIRVD Model","title":"Problem: SEIRVD Model","text":"uwd_seirvd = @relation (S, I) begin\n\nend;\ndisplay_uwd(uwd_seirvd)","category":"page"},{"location":"practices/SEIRVD/SEIRVD_model_hard/","page":"Problem: SEIRVD Model","title":"Problem: SEIRVD Model","text":"Apply the composition rule to the open stock and flow diagrams","category":"page"},{"location":"practices/SEIRVD/SEIRVD_model_hard/","page":"Problem: SEIRVD Model","title":"Problem: SEIRVD Model","text":"seirvd=oapply(uwd_seirvd,Dict()) |> apex\nGraph(seirvd)","category":"page"},{"location":"practices/SEIRVD/SEIRVD_model_hard/#Step-3:-Solve-the-composed-model","page":"Problem: SEIRVD Model","title":"Step 3: Solve the composed model","text":"","category":"section"},{"location":"practices/SEIRVD/SEIRVD_model_hard/","page":"Problem: SEIRVD Model","title":"Problem: SEIRVD Model","text":"Define the constant parameters values, and stocks initial values. The values are given. Please note those values are arbitrary given for toy model running. You can try to modify those values based on your interested infectious diseases.","category":"page"},{"location":"practices/SEIRVD/SEIRVD_model_hard/","page":"Problem: SEIRVD Model","title":"Problem: SEIRVD Model","text":"p = LVector(\n    cβ=0.2, N=1000, rrec=0.083, rv=0.02, rlatent=0.2, rd=0.0001\n)\n# Define initial values for stocks\nu0 = LVector(\n    S=990, E=0, I=10, R=0, V=0, D=0\n)","category":"page"},{"location":"practices/SEIRVD/SEIRVD_model_hard/","page":"Problem: SEIRVD Model","title":"Problem: SEIRVD Model","text":"Solve the ODEs generated from the composed stock and flow diagram","category":"page"},{"location":"practices/SEIRVD/SEIRVD_model_hard/","page":"Problem: SEIRVD Model","title":"Problem: SEIRVD Model","text":"prob = ODEProblem(vectorfield(seirvd),u0,(0.0,100.0),p);\nsol = solve(prob,Tsit5(),abstol=1e-8);\nplot(sol)","category":"page"},{"location":"practices/SIRV/SIRV_composition_model_simple/","page":"Problem: SIRV Model","title":"Problem: SIRV Model","text":"using StockFlow\n\nusing Catlab\nusing Catlab.CategoricalAlgebra\nusing LabelledArrays\nusing OrdinaryDiffEq\nusing Plots\n\nusing Catlab.Graphics\nusing Catlab.Programs\nusing Catlab.WiringDiagrams","category":"page"},{"location":"practices/SIRV/SIRV_composition_model_simple/#Problem:-SIRV-Model","page":"Problem: SIRV Model","title":"Problem: SIRV Model","text":"","category":"section"},{"location":"practices/SIRV/SIRV_composition_model_simple/","page":"Problem: SIRV Model","title":"Problem: SIRV Model","text":"To compose a SIRV model as follows: (Image: SIRV_composed_model.png)","category":"page"},{"location":"practices/SIRV/SIRV_composition_model_simple/#Step-1.-Define-sub-components","page":"Problem: SIRV Model","title":"Step 1. Define sub-components","text":"","category":"section"},{"location":"practices/SIRV/SIRV_composition_model_simple/#.1-Define-SIR-model","page":"Problem: SIRV Model","title":"1.1 Define SIR model","text":"","category":"section"},{"location":"practices/SIRV/SIRV_composition_model_simple/","page":"Problem: SIRV Model","title":"Problem: SIRV Model","text":"(Image: SIR_Submodel.png)","category":"page"},{"location":"practices/SIRV/SIRV_composition_model_simple/","page":"Problem: SIRV Model","title":"Problem: SIRV Model","text":"The definition of the SIR model are as follows:","category":"page"},{"location":"practices/SIRV/SIRV_composition_model_simple/","page":"Problem: SIRV Model","title":"Problem: SIRV Model","text":"# Define functions ϕ of flows in the SIR model\nfNewIncidence(u,p,t)=p.cβ*u.S*u.I/p.N\nfNewRecovery(u,p,t)=u.I/p.tr\n\n# StockAndFlowp(stocks,\n#               (flow=>function, upstream=>d\nsir = StockAndFlowp((:S, :I, :R), \n   ((:NewIncidence=>fNewIncidence, :S=>:I)=>(:S,:I),\n    (:NewRecovery=>fNewRecovery, :I=>:R)=>:I)\n)","category":"page"},{"location":"practices/SIRV/SIRV_composition_model_simple/","page":"Problem: SIRV Model","title":"Problem: SIRV Model","text":"Now, we just created a Stock and Flow Diagram of a SIR model with the primitive schema. We can plot the Stock and Flow Diagram:","category":"page"},{"location":"practices/SIRV/SIRV_composition_model_simple/","page":"Problem: SIRV Model","title":"Problem: SIRV Model","text":"Graph(sir)","category":"page"},{"location":"practices/SIRV/SIRV_composition_model_simple/#.2-Define-SVI-model","page":"Problem: SIRV Model","title":"1.2 Define SVI model","text":"","category":"section"},{"location":"practices/SIRV/SIRV_composition_model_simple/","page":"Problem: SIRV Model","title":"Problem: SIRV Model","text":"The SVI stock and flow Diagram is as follows: (Image: SVI_submodel.png)","category":"page"},{"location":"practices/SIRV/SIRV_composition_model_simple/","page":"Problem: SIRV Model","title":"Problem: SIRV Model","text":"# Define functions ϕ of flows in the SVI model\nfNewIncidenceFromV(u,p,t)=p.cβ*u.V*u.I*(1-p.e)/p.N\nfNewVaccinated(u,p,t)=u.S*p.rv\n\n\n# StockAndFlowp(stocks,\n#               (flow=>function, upstream=>do\nGraph(svi)","category":"page"},{"location":"practices/SIRV/SIRV_composition_model_simple/#Composition-method-1-–-via-structured-cospan","page":"Problem: SIRV Model","title":"Composition method 1 – via structured cospan","text":"","category":"section"},{"location":"practices/SIRV/SIRV_composition_model_simple/#Open-SIR-stock-and-flow-Diagram-as-a-structured-cospan,-with-the-left-leg-[:R],-and-with-the-right-leg-[:S,-:I]","page":"Problem: SIRV Model","title":"Open SIR stock and flow Diagram as a structured cospan, with the left leg [:R], and with the right leg [:S, :I]","text":"","category":"section"},{"location":"practices/SIRV/SIRV_composition_model_simple/","page":"Problem: SIRV Model","title":"Problem: SIRV Model","text":"","category":"page"},{"location":"practices/SIRV/SIRV_composition_model_simple/#Open-SVI-stock-and-flow-Diagram-as-a-structured-cospan,-with-the-left-leg-[:S,:I],-and-with-the-right-leg-[:V]","page":"Problem: SIRV Model","title":"Open SVI stock and flow Diagram as a structured cospan, with the left leg [:S,:I], and with the right leg [:V]","text":"","category":"section"},{"location":"practices/SIRV/SIRV_composition_model_simple/","page":"Problem: SIRV Model","title":"Problem: SIRV Model","text":"","category":"page"},{"location":"practices/SIRV/SIRV_composition_model_simple/#Now,-we-can-compose-those-two-structured-cospan-with-the-common-foot-[:S,:I].-And-the-composed-model-is-the-SIRV-model-we-need","page":"Problem: SIRV Model","title":"Now, we can compose those two structured cospan with the common foot [:S,:I]. And the composed model is the SIRV model we need","text":"","category":"section"},{"location":"practices/SIRV/SIRV_composition_model_simple/","page":"Problem: SIRV Model","title":"Problem: SIRV Model","text":"sirv1=apex()","category":"page"},{"location":"practices/SIRV/SIRV_composition_model_simple/","page":"Problem: SIRV Model","title":"Problem: SIRV Model","text":"Graph(sirv1)","category":"page"},{"location":"practices/SIRV/SIRV_composition_model_simple/#Composition-method-2-–-via-uwd-algebra","page":"Problem: SIRV Model","title":"Composition method 2 – via uwd-algebra","text":"","category":"section"},{"location":"practices/SIRV/SIRV_composition_model_simple/#Define-the-composition-rule-of-the-uwd-algebra","page":"Problem: SIRV Model","title":"Define the composition rule of the uwd-algebra","text":"","category":"section"},{"location":"practices/SIRV/SIRV_composition_model_simple/","page":"Problem: SIRV Model","title":"Problem: SIRV Model","text":"uwd_sirv = \ndisplay_uwd(uwd_sirv)","category":"page"},{"location":"practices/SIRV/SIRV_composition_model_simple/","page":"Problem: SIRV Model","title":"Problem: SIRV Model","text":"sirv2=oapply(uwd_sirv,Dict()) |> apex","category":"page"},{"location":"practices/SIRV/SIRV_composition_model_simple/","page":"Problem: SIRV Model","title":"Problem: SIRV Model","text":"Graph(sirv2)","category":"page"},{"location":"practices/SIRV/SIRV_composition_model_simple/#Solve-the-SIRV-model","page":"Problem: SIRV Model","title":"Solve the SIRV model","text":"","category":"section"},{"location":"practices/SIRV/SIRV_composition_model_simple/","page":"Problem: SIRV Model","title":"Problem: SIRV Model","text":"Define constant parameters and initial values","category":"page"},{"location":"practices/SIRV/SIRV_composition_model_simple/","page":"Problem: SIRV Model","title":"Problem: SIRV Model","text":"p_sirv = LVector(\n    cβ=0.2, N=1000, tr=12, rv=0.02, e=0.9\n)\n# Define initial values for stocks\nu0_sirv = LVector(\n    S=990, I=10, R=0, V=0\n)","category":"page"},{"location":"practices/SIRV/SIRV_composition_model_simple/#Model-results-of-sirv1-generated-by-the-method-of-composing-the-structured-cospan","page":"Problem: SIRV Model","title":"Model results of sirv1 generated by the method of composing the structured cospan","text":"","category":"section"},{"location":"practices/SIRV/SIRV_composition_model_simple/","page":"Problem: SIRV Model","title":"Problem: SIRV Model","text":"prob_sirv1 = ODEProblem(vectorfield(sirv1),u0_sirv,(0.0,100.0),p_sirv);\nsol_sirv1 = solve(prob_sirv1,Tsit5(),abstol=1e-8);\nplot(sol_sirv1)","category":"page"},{"location":"practices/SIRV/SIRV_composition_model_simple/#Model-results-of-sirv2-generated-by-the-method-of-composing-using-uwd-algebra","page":"Problem: SIRV Model","title":"Model results of sirv2 generated by the method of composing using uwd-algebra","text":"","category":"section"},{"location":"practices/SIRV/SIRV_composition_model_simple/","page":"Problem: SIRV Model","title":"Problem: SIRV Model","text":"prob_sirv2 = ODEProblem(vectorfield(sirv2),u0_sirv,(0,100.0),p_sirv)\nsol_sirv2 = solve(prob_sirv2,Tsit5(),sbstol=1e-8);\nplot(sol_sirv2)","category":"page"},{"location":"#StockFlow","page":"StockFlow.jl","title":"StockFlow","text":"","category":"section"},{"location":"","page":"StockFlow.jl","title":"StockFlow.jl","text":"Modules = [\n    StockFlow,\n    StockFlow.Syntax,\n    StockFlow.PremadeModels\n]\nPrivate = false","category":"page"},{"location":"#StockFlow.TheoryStockAndFlow0","page":"StockFlow.jl","title":"StockFlow.TheoryStockAndFlow0","text":"define the sub-schema of c0, which includes the three objects: stocks(S), sum-auxiliary-variables(SV), and the linkages between them (LS) to be composed \n\n\n\n\n\n","category":"constant"},{"location":"#StockFlow.TheoryStockAndFlowF","page":"StockFlow.jl","title":"StockFlow.TheoryStockAndFlowF","text":"define the schema of a general stock and flow diagram \n\n\n\n\n\n","category":"constant"},{"location":"#StockFlow.TheoryStockAndFlowStructure","page":"StockFlow.jl","title":"StockFlow.TheoryStockAndFlowStructure","text":"define the schema of a general stock and flow diagram, not includes the functions of auxiliary variables \n\n\n\n\n\n","category":"constant"},{"location":"#StockFlow.TheoryStockAndFlowStructureF","page":"StockFlow.jl","title":"StockFlow.TheoryStockAndFlowStructureF","text":"define the schema of a general stock and flow diagram \n\n\n\n\n\n","category":"constant"},{"location":"#StockFlow.CausalLoop-Tuple{Any, Any}","page":"StockFlow.jl","title":"StockFlow.CausalLoop","text":"CausalLoop(ns,es)\n\nCreate causal loop diagram from collection of nodes and collection of edges.\n\n\n\n\n\n","category":"method"},{"location":"#StockFlow.StockAndFlow0-Tuple{Any, Any, Any}","page":"StockFlow.jl","title":"StockFlow.StockAndFlow0","text":"StockAndFlow0(s,sv,ssv)\n\nfor an instance of the sub-schema, the program supports only have stocks, or only have sum auxiliary variables, or both stocks  and sum auxiliary variables, or have both \n\n\n\n\n\n","category":"method"},{"location":"#StockFlow.StockAndFlowF-NTuple{5, Any}","page":"StockFlow.jl","title":"StockFlow.StockAndFlowF","text":"StockAndFlowF(s,p,v,f,sv)\n\nEXAMPLE: when define the dynamical variables, need to define with the correct order\n\nsir_StockAndFlow=StockAndFlowF((:S=>(:F_NONE,:inf,:N), :I=>(:inf,:F_NONE,:N)),\n (:c, :beta),\n (:v_prevalence=>(:I,:N,:/),:v_meanInfectiousContactsPerS=>(:c,:v_prevalence,:*),:v_perSIncidenceRate=>(:beta,:v_meanInfectiousContactsPerS,:*),:v_newInfetions=>(:S,:v_perSIncidenceRate,:*)),\n (:inf=>:v_newInfetions),\n (:N))\n\n\n\n\n\n","category":"method"},{"location":"#StockFlow.add_prefix!-Tuple{AbstractStockAndFlow0, Any}","page":"StockFlow.jl","title":"StockFlow.add_prefix!","text":"add_prefix!(sf::AbstractStockAndFlowStructureF, prefix)\n\nModify a AbstractStockAndFlowStructureF so named elements begin with prefix Prefix can be anything which can be cast to a Symbol.For feet.\n\n\n\n\n\n","category":"method"},{"location":"#StockFlow.add_prefix!-Tuple{AbstractStockAndFlowStructureF, Any}","page":"StockFlow.jl","title":"StockFlow.add_prefix!","text":"add_prefix!(sf::AbstractStockAndFlowStructureF, prefix)\n\nModify a AbstractStockAndFlowStructureF so named elements begin with prefix Prefix can be anything which can be cast to a Symbol.\n\n\n\n\n\n","category":"method"},{"location":"#StockFlow.add_suffix!-Tuple{AbstractStockAndFlow0, Any}","page":"StockFlow.jl","title":"StockFlow.add_suffix!","text":"add_suffix!(sf::AbstractStockAndFlow0, suffix)\n\nModify a AbstractStockAndFlow0 so named elements end with suffix. Suffix can be anything which can be cast to a Symbol. For feet.\n\n\n\n\n\n","category":"method"},{"location":"#StockFlow.add_suffix!-Tuple{AbstractStockAndFlowStructureF, Any}","page":"StockFlow.jl","title":"StockFlow.add_suffix!","text":"add_suffix!(sf::AbstractStockAndFlow0, suffix)\n\nModify a AbstractStockAndFlow0 so named elements end with suffix. Suffix can be anything which can be cast to a Symbol.\n\n\n\n\n\n","category":"method"},{"location":"#StockFlow.args-Tuple{AbstractStockAndFlowF, Any}","page":"StockFlow.jl","title":"StockFlow.args","text":"args(p::AbstractStockAndFlowF,v)\n\nReturn a Vector of Symbols of flattened stocks, sums, parameters and source dynamic variables a dynamic variable at index v links to.\n\n\n\n\n\n","category":"method"},{"location":"#StockFlow.args-Tuple{AbstractStockAndFlowStructureF, Any}","page":"StockFlow.jl","title":"StockFlow.args","text":"args(p::AbstractStockAndFlowStructureF,v)\n\nReturn a Vector of Symbols of flattened stocks, sums, parameters and source dynamic variables a dynamic variable at index v links to.\n\n\n\n\n\n","category":"method"},{"location":"#StockFlow.args_vname-Tuple{AbstractStockAndFlowStructureF, Any}","page":"StockFlow.jl","title":"StockFlow.args_vname","text":"Return a Tuple of Vectors of Symbols of flattened stocks, sums, parameters and source dynamic variables a dynamic variable at index v links to.\n\n\n\n\n\n","category":"method"},{"location":"#StockFlow.convertStockFlowToSystemStructure-Tuple{AbstractStockAndFlowF}","page":"StockFlow.jl","title":"StockFlow.convertStockFlowToSystemStructure","text":"Return a new StockAndFlowStructureF with flattened names, operators and positions from an AbstractStockAndFlowF.\n\n\n\n\n\n","category":"method"},{"location":"#StockFlow.convertSystemStructureToStockFlow-Tuple{AbstractStockAndFlowStructureF, Any}","page":"StockFlow.jl","title":"StockFlow.convertSystemStructureToStockFlow","text":"Return a new stock flow with flattened names, operators and positions from an AbstractStockAndFlowStructureF. Need to provide dynamic variable definitions, eg\n\nconvertSystemStructureToStockFlow(MyStockFlowStructure, (:v_prevalence=>(:I,:N,:/),:v_meanInfectiousContactsPerS=>(:c,:v_prevalence,:*)))\n\n\n\n\n\n","category":"method"},{"location":"#StockFlow.convertToCausalLoop-Tuple{AbstractStockAndFlowStructureF}","page":"StockFlow.jl","title":"StockFlow.convertToCausalLoop","text":"Convert StockFlow to CLD. Nodes: stocks, flows, sum variables, parameters, nonflow dynamic variables Edges: morphisms in stock flow\n\n\n\n\n\n","category":"method"},{"location":"#StockFlow.extracFlowsStructureAndFlatten-Tuple{AbstractStockAndFlowStructure}","page":"StockFlow.jl","title":"StockFlow.extracFlowsStructureAndFlatten","text":"Return flow names as Symbol, along with the linked flow variables\n\n\n\n\n\n","category":"method"},{"location":"#StockFlow.extracPsStructureAndFlatten-Tuple{AbstractStockAndFlowStructureF}","page":"StockFlow.jl","title":"StockFlow.extracPsStructureAndFlatten","text":"Return parameter names as Symbol\n\n\n\n\n\n","category":"method"},{"location":"#StockFlow.extracStocksStructureAndFlatten-Tuple{AbstractStockAndFlowStructureF}","page":"StockFlow.jl","title":"StockFlow.extracStocksStructureAndFlatten","text":"Return stock names as Symbol, along with the linked flows and sum variables\n\n\n\n\n\n","category":"method"},{"location":"#StockFlow.extracSumVStructureAndFlatten-Tuple{AbstractStockAndFlowStructureF}","page":"StockFlow.jl","title":"StockFlow.extracSumVStructureAndFlatten","text":"Return sum variable names as Symbol, along with the linked dynamic variables\n\n\n\n\n\n","category":"method"},{"location":"#StockFlow.extracVAndAttrStructureAndFlatten-Tuple{AbstractStockAndFlowF}","page":"StockFlow.jl","title":"StockFlow.extracVAndAttrStructureAndFlatten","text":"Convert dynamic variable names to Symbol, convert all operators to a single operator if they are equal else throw an error, and  \n\n\n\n\n\n","category":"method"},{"location":"#StockFlow.extracVStructureAndFlatten-Tuple{AbstractStockAndFlowStructureF}","page":"StockFlow.jl","title":"StockFlow.extracVStructureAndFlatten","text":"Return dynamic variable definitions as Vector with elements of form :dv => [:arg1, :arg2]\n\n\n\n\n\n","category":"method"},{"location":"#StockFlow.flowVariableIndex-Tuple{AbstractStockAndFlowStructure, Any}","page":"StockFlow.jl","title":"StockFlow.flowVariableIndex","text":"return the auxiliary variable's index that related to the flow with index of f \n\n\n\n\n\n","category":"method"},{"location":"#StockFlow.fname-Tuple{AbstractStockAndFlowStructure, Any}","page":"StockFlow.jl","title":"StockFlow.fname","text":"return the flows name with index of f \n\n\n\n\n\n","category":"method"},{"location":"#StockFlow.fnames-Tuple{AbstractStockAndFlowStructure}","page":"StockFlow.jl","title":"StockFlow.fnames","text":"return flow names \n\n\n\n\n\n","category":"method"},{"location":"#StockFlow.funcDynam-Tuple{AbstractStockAndFlow, Any}","page":"StockFlow.jl","title":"StockFlow.funcDynam","text":"funcDynam(p::AbstractStockAndFlow,v)\n\nreturn the functions of variables give index v \n\n\n\n\n\n","category":"method"},{"location":"#StockFlow.funcDynam-Tuple{AbstractStockAndFlowF, Any}","page":"StockFlow.jl","title":"StockFlow.funcDynam","text":"funcDynam(sf::AbstractStockAndFlowF,v)\n\nreturn the functions of variables give index v \n\n\n\n\n\n","category":"method"},{"location":"#StockFlow.funcFlow-Tuple{Union{AbstractStockAndFlow, AbstractStockAndFlowF}, Any}","page":"StockFlow.jl","title":"StockFlow.funcFlow","text":"generate the function substituting sum variables in with flow index fn \n\n\n\n\n\n","category":"method"},{"location":"#StockFlow.funcFlowRaw-Tuple{Union{AbstractStockAndFlow, AbstractStockAndFlowF}, Any}","page":"StockFlow.jl","title":"StockFlow.funcFlowRaw","text":"return the functions (not substitutes the function of sum variables yet) of flow index f \n\n\n\n\n\n","category":"method"},{"location":"#StockFlow.funcFlows-Tuple{Union{AbstractStockAndFlow, AbstractStockAndFlowF}}","page":"StockFlow.jl","title":"StockFlow.funcFlows","text":"return the LVector of pairs: fname => function (with function of sum variables substitue in) \n\n\n\n\n\n","category":"method"},{"location":"#StockFlow.funcFlowsRaw-Tuple{Union{AbstractStockAndFlow, AbstractStockAndFlowF}}","page":"StockFlow.jl","title":"StockFlow.funcFlowsRaw","text":"return the LVector of pairs: fname => function (raw: not substitutes the function of sum variables yet) \n\n\n\n\n\n","category":"method"},{"location":"#StockFlow.funcSV-Tuple{AbstractStockAndFlow0, Any}","page":"StockFlow.jl","title":"StockFlow.funcSV","text":"generate the function of a sum auxiliary variable (index sv) with the sum of all stocks links to it \n\n\n\n\n\n","category":"method"},{"location":"#StockFlow.funcSVs-Tuple{AbstractStockAndFlow0}","page":"StockFlow.jl","title":"StockFlow.funcSVs","text":"return the LVector of pairs: svname => function \n\n\n\n\n\n","category":"method"},{"location":"#StockFlow.fv-Tuple{AbstractStockAndFlowStructure, Any}","page":"StockFlow.jl","title":"StockFlow.fv","text":"get flow variable of flow \n\n\n\n\n\n","category":"method"},{"location":"#StockFlow.fvs-Tuple{AbstractStockAndFlowStructure}","page":"StockFlow.jl","title":"StockFlow.fvs","text":"get ordered list of indices of dynamic variable for each flow \n\n\n\n\n\n","category":"method"},{"location":"#StockFlow.inflows-Tuple{AbstractStockAndFlowStructure, Any}","page":"StockFlow.jl","title":"StockFlow.inflows","text":"return inflows of stock index s \n\n\n\n\n\n","category":"method"},{"location":"#StockFlow.inflowsAll-Tuple{AbstractStockAndFlowStructure}","page":"StockFlow.jl","title":"StockFlow.inflowsAll","text":"return all inflows \n\n\n\n\n\n","category":"method"},{"location":"#StockFlow.instock-Tuple{AbstractStockAndFlowStructure, Any}","page":"StockFlow.jl","title":"StockFlow.instock","text":"return stocks of flow index f flow in \n\n\n\n\n\n","category":"method"},{"location":"#StockFlow.lpvvposition-Tuple{AbstractStockAndFlowF, Any}","page":"StockFlow.jl","title":"StockFlow.lpvvposition","text":"return argument position of source constant parameter of an auxiliary variable \n\n\n\n\n\n","category":"method"},{"location":"#StockFlow.lsnames-Tuple{AbstractStockAndFlow0}","page":"StockFlow.jl","title":"StockFlow.lsnames","text":"return the pair of names of (stock, sum-auxiliary-variable) for all linkages between them \n\n\n\n\n\n","category":"method"},{"location":"#StockFlow.lsvvposition-Tuple{AbstractStockAndFlowF, Any}","page":"StockFlow.jl","title":"StockFlow.lsvvposition","text":"return argument position of source sum dynamical variable of an auxiliary variable \n\n\n\n\n\n","category":"method"},{"location":"#StockFlow.lvtgtposition-Tuple{AbstractStockAndFlowF, Any}","page":"StockFlow.jl","title":"StockFlow.lvtgtposition","text":"return argument position of source auxiliary variable of an auxiliary variable \n\n\n\n\n\n","category":"method"},{"location":"#StockFlow.lvvposition-Tuple{AbstractStockAndFlowF, Any}","page":"StockFlow.jl","title":"StockFlow.lvvposition","text":"return argument position of source stock variable of an auxiliary variable \n\n\n\n\n\n","category":"method"},{"location":"#StockFlow.make_v_expr-Tuple{AbstractStockAndFlowF, Any}","page":"StockFlow.jl","title":"StockFlow.make_v_expr","text":"create expresision of an auxiliary variable v \n\n\n\n\n\n","category":"method"},{"location":"#StockFlow.ne-Tuple{AbstractCausalLoop}","page":"StockFlow.jl","title":"StockFlow.ne","text":"return count of edges of CLD \n\n\n\n\n\n","category":"method"},{"location":"#StockFlow.nf-Tuple{AbstractStockAndFlowStructure}","page":"StockFlow.jl","title":"StockFlow.nf","text":"flow count \n\n\n\n\n\n","category":"method"},{"location":"#StockFlow.ni-Tuple{AbstractStockAndFlowStructure}","page":"StockFlow.jl","title":"StockFlow.ni","text":"inflow count \n\n\n\n\n\n","category":"method"},{"location":"#StockFlow.nlpv-Tuple{AbstractStockAndFlowStructureF}","page":"StockFlow.jl","title":"StockFlow.nlpv","text":"link dynamic variable parameter count \n\n\n\n\n\n","category":"method"},{"location":"#StockFlow.nls-Tuple{AbstractStockAndFlow0}","page":"StockFlow.jl","title":"StockFlow.nls","text":"link stock sum count \n\n\n\n\n\n","category":"method"},{"location":"#StockFlow.nlsv-Tuple{AbstractStockAndFlowStructure}","page":"StockFlow.jl","title":"StockFlow.nlsv","text":"link sum variable dynamic variable count \n\n\n\n\n\n","category":"method"},{"location":"#StockFlow.nlv-Tuple{AbstractStockAndFlowStructure}","page":"StockFlow.jl","title":"StockFlow.nlv","text":"link stock dynamic variable count \n\n\n\n\n\n","category":"method"},{"location":"#StockFlow.nlvv-Tuple{AbstractStockAndFlowStructureF}","page":"StockFlow.jl","title":"StockFlow.nlvv","text":"link dynamic variable dynamic variable count \n\n\n\n\n\n","category":"method"},{"location":"#StockFlow.nn-Tuple{AbstractCausalLoop}","page":"StockFlow.jl","title":"StockFlow.nn","text":"return count of nodes of CLD \n\n\n\n\n\n","category":"method"},{"location":"#StockFlow.nname-Tuple{AbstractCausalLoop, Any}","page":"StockFlow.jl","title":"StockFlow.nname","text":"return node's name with index n \n\n\n\n\n\n","category":"method"},{"location":"#StockFlow.nnames-Tuple{AbstractCausalLoop}","page":"StockFlow.jl","title":"StockFlow.nnames","text":"return node names of CLD \n\n\n\n\n\n","category":"method"},{"location":"#StockFlow.no-Tuple{AbstractStockAndFlowStructure}","page":"StockFlow.jl","title":"StockFlow.no","text":"outflow count \n\n\n\n\n\n","category":"method"},{"location":"#StockFlow.np-Tuple{AbstractStockAndFlowStructureF}","page":"StockFlow.jl","title":"StockFlow.np","text":"parameter count \n\n\n\n\n\n","category":"method"},{"location":"#StockFlow.ns-Tuple{AbstractStockAndFlow0}","page":"StockFlow.jl","title":"StockFlow.ns","text":"stock count \n\n\n\n\n\n","category":"method"},{"location":"#StockFlow.nsv-Tuple{AbstractStockAndFlow0}","page":"StockFlow.jl","title":"StockFlow.nsv","text":"sum variable count \n\n\n\n\n\n","category":"method"},{"location":"#StockFlow.nvb-Tuple{AbstractStockAndFlowStructure}","page":"StockFlow.jl","title":"StockFlow.nvb","text":"dynamic variable count \n\n\n\n\n\n","category":"method"},{"location":"#StockFlow.outflows-Tuple{AbstractStockAndFlowStructure, Any}","page":"StockFlow.jl","title":"StockFlow.outflows","text":"return outflows of stock index s \n\n\n\n\n\n","category":"method"},{"location":"#StockFlow.outflowsAll-Tuple{AbstractStockAndFlowStructure}","page":"StockFlow.jl","title":"StockFlow.outflowsAll","text":"return all outflows \n\n\n\n\n\n","category":"method"},{"location":"#StockFlow.outstock-Tuple{AbstractStockAndFlowStructure, Any}","page":"StockFlow.jl","title":"StockFlow.outstock","text":"return stocks that flow index f flow out from \n\n\n\n\n\n","category":"method"},{"location":"#StockFlow.pname-Tuple{AbstractStockAndFlowStructureF, Any}","page":"StockFlow.jl","title":"StockFlow.pname","text":"return the auxiliary variables name with index of v \n\n\n\n\n\n","category":"method"},{"location":"#StockFlow.pnames-Tuple{AbstractStockAndFlowStructureF}","page":"StockFlow.jl","title":"StockFlow.pnames","text":"return parameter names \n\n\n\n\n\n","category":"method"},{"location":"#StockFlow.rebuildStratifiedModelByFlattenSymbols-Tuple{AbstractStockAndFlowF}","page":"StockFlow.jl","title":"StockFlow.rebuildStratifiedModelByFlattenSymbols","text":"Return a new stock flow with flattened names, operators and positions from the old\n\n\n\n\n\n","category":"method"},{"location":"#StockFlow.sedge-Tuple{AbstractCausalLoop, Any}","page":"StockFlow.jl","title":"StockFlow.sedge","text":"return edge's name with target number t \n\n\n\n\n\n","category":"method"},{"location":"#StockFlow.set_fnames!-Tuple{AbstractStockAndFlowStructure, Any}","page":"StockFlow.jl","title":"StockFlow.set_fnames!","text":"set flow names to vector of symbols\n\n\n\n\n\n","category":"method"},{"location":"#StockFlow.set_pnames!-Tuple{AbstractStockAndFlowStructure, Any}","page":"StockFlow.jl","title":"StockFlow.set_pnames!","text":"set parameter names to vector of symbols\n\n\n\n\n\n","category":"method"},{"location":"#StockFlow.set_snames!-Tuple{AbstractStockAndFlow0, Any}","page":"StockFlow.jl","title":"StockFlow.set_snames!","text":"set stock names to vector of symbols\n\n\n\n\n\n","category":"method"},{"location":"#StockFlow.set_svnames!-Tuple{AbstractStockAndFlow0, Any}","page":"StockFlow.jl","title":"StockFlow.set_svnames!","text":"set sum variable names to vector of symbols\n\n\n\n\n\n","category":"method"},{"location":"#StockFlow.set_vnames!-Tuple{AbstractStockAndFlowStructure, Any}","page":"StockFlow.jl","title":"StockFlow.set_vnames!","text":"set dynamic variable names to vector of symbols\n\n\n\n\n\n","category":"method"},{"location":"#StockFlow.sname-Tuple{AbstractStockAndFlow0, Any}","page":"StockFlow.jl","title":"StockFlow.sname","text":"return the stocks name with index of s \n\n\n\n\n\n","category":"method"},{"location":"#StockFlow.snames-Tuple{AbstractStockAndFlow0}","page":"StockFlow.jl","title":"StockFlow.snames","text":"return stock names \n\n\n\n\n\n","category":"method"},{"location":"#StockFlow.stockssv-Tuple{AbstractStockAndFlow0, Any}","page":"StockFlow.jl","title":"StockFlow.stockssv","text":"return stocks that sum variable index sv link to \n\n\n\n\n\n","category":"method"},{"location":"#StockFlow.stocksv-Tuple{AbstractStockAndFlowStructure, Any}","page":"StockFlow.jl","title":"StockFlow.stocksv","text":"return stocks that auxiliary variable index v link to \n\n\n\n\n\n","category":"method"},{"location":"#StockFlow.svname-Tuple{AbstractStockAndFlow0, Any}","page":"StockFlow.jl","title":"StockFlow.svname","text":"return the sum auxiliary variables name with index of sv \n\n\n\n\n\n","category":"method"},{"location":"#StockFlow.svnames-Tuple{AbstractStockAndFlow0}","page":"StockFlow.jl","title":"StockFlow.svnames","text":"return sum variable names \n\n\n\n\n\n","category":"method"},{"location":"#StockFlow.svsstock-Tuple{AbstractStockAndFlowStructure, Any}","page":"StockFlow.jl","title":"StockFlow.svsstock","text":"return sum auxiliary variables that stock s links to \n\n\n\n\n\n","category":"method"},{"location":"#StockFlow.svsstockAllF-Tuple{AbstractStockAndFlowStructure}","page":"StockFlow.jl","title":"StockFlow.svsstockAllF","text":"return sum auxiliary variables all stocks link (frequency) \n\n\n\n\n\n","category":"method"},{"location":"#StockFlow.svsv-Tuple{AbstractStockAndFlowStructure, Any}","page":"StockFlow.jl","title":"StockFlow.svsv","text":"return sum variables that auxiliary variable index v link to \n\n\n\n\n\n","category":"method"},{"location":"#StockFlow.tedge-Tuple{AbstractCausalLoop, Any}","page":"StockFlow.jl","title":"StockFlow.tedge","text":"return edge's name with edge number e \n\n\n\n\n\n","category":"method"},{"location":"#StockFlow.vname-Tuple{AbstractStockAndFlowStructure, Any}","page":"StockFlow.jl","title":"StockFlow.vname","text":"return the auxiliary variables name with index of v \n\n\n\n\n\n","category":"method"},{"location":"#StockFlow.vnames-Tuple{AbstractStockAndFlowStructure}","page":"StockFlow.jl","title":"StockFlow.vnames","text":"return variable names \n\n\n\n\n\n","category":"method"},{"location":"#StockFlow.vop-Tuple{AbstractStockAndFlowF, Any}","page":"StockFlow.jl","title":"StockFlow.vop","text":"return operator of an auxiliary variable \n\n\n\n\n\n","category":"method"},{"location":"#StockFlow.vpsrc-Tuple{AbstractStockAndFlowStructureF, Any}","page":"StockFlow.jl","title":"StockFlow.vpsrc","text":"return auxiliary variable's source constant parameters \n\n\n\n\n\n","category":"method"},{"location":"#StockFlow.vptgt-Tuple{AbstractStockAndFlowStructureF, Any}","page":"StockFlow.jl","title":"StockFlow.vptgt","text":"return constant parameters's link auxiliary variables \n\n\n\n\n\n","category":"method"},{"location":"#StockFlow.vsrc-Tuple{AbstractStockAndFlowStructureF, Any}","page":"StockFlow.jl","title":"StockFlow.vsrc","text":"return auxiliary variable's target auxiliary variables it links to \n\n\n\n\n\n","category":"method"},{"location":"#StockFlow.vsstock-Tuple{AbstractStockAndFlowStructure, Any}","page":"StockFlow.jl","title":"StockFlow.vsstock","text":"return auxiliary variables that stock s links to \n\n\n\n\n\n","category":"method"},{"location":"#StockFlow.vsstockAllF-Tuple{AbstractStockAndFlowStructure}","page":"StockFlow.jl","title":"StockFlow.vsstockAllF","text":"return auxiliary variables all stocks link (frequency) \n\n\n\n\n\n","category":"method"},{"location":"#StockFlow.vssv-Tuple{AbstractStockAndFlowStructure, Any}","page":"StockFlow.jl","title":"StockFlow.vssv","text":"return auxiliary variables that sum auxiliary variable sv links to \n\n\n\n\n\n","category":"method"},{"location":"#StockFlow.vssvAllF-Tuple{AbstractStockAndFlowStructure}","page":"StockFlow.jl","title":"StockFlow.vssvAllF","text":"return auxiliary variables all sum auxiliary variables link (frequency) \n\n\n\n\n\n","category":"method"},{"location":"#StockFlow.vtgt-Tuple{AbstractStockAndFlowStructureF, Any}","page":"StockFlow.jl","title":"StockFlow.vtgt","text":"return auxiliary variable's source auxiliary variables that it links to \n\n\n\n\n\n","category":"method"},{"location":"#StockFlow.Syntax","page":"StockFlow.jl","title":"StockFlow.Syntax","text":"Alternative syntax for use in the definition of stock and flow models.\n\nExamples\n\n# An S-I-R model of infection\nSIR = @stock_and_flow begin\n    :stocks\n    S\n    I\n    R\n\n    :parameters\n    c\n    beta\n    tRec\n\n    :dynamic_variables\n    v_prevalence = I / N\n    v_meanInfectiousContactsPerS = c * v_prevalence\n    v_perSIncidenceRate = beta * v_meanInfectiousContactsPerS\n    v_newInfections = S * v_perSIncidenceRate\n    v_newRecovery = I / tRec\n\n    :flows\n    S => inf(v_newInfections) => I\n    I => rec(v_newRecovery) => R\n\n    :sums\n    N = [S, I, R]\nend\n\n# Generates:\n# SIR = StockAndFlowF(\n#     # stocks\n#     (:S => (:F_NONE, :inf, :N), :I => (:inf, :rec, :N), :R => (:rec, :F_NONE, :N)),\n#     # parameters\n#     (:c, :beta, :tRec),\n#     # dynamical variables\n#     (   :v_prevalence => ((:I, :N) => :/),\n#         :v_meanInfectiousContactsPerS => ((:c, :v_prevalence) => :*),\n#         :v_perSIncidenceRate => ((:beta, :v_meanInfectiousContactsPerS) => :*),\n#         :v_newInfections => ((:S, :v_perSIncidenceRate) => :*),\n#         :v_newRecovery => ((:I, :tRec) => :/),\n#     ),\n#     # flows\n#     (:inf => :v_newInfections, :rec => :v_newRecovery),\n#     # sum dynamical variables\n#     (:N),\n# )\n\n# The same model as before, but with the dynamic variables inferred\nSIR_2 = @stock_and_flow begin\n    :stocks\n    S\n    I\n    R\n\n    :parameters\n    c\n    beta\n    tRec\n\n    # We can leave out dynamic variables and let them be inferred from flows entirely!\n\n    :flows\n    S => inf(S * beta * (c * (I / N))) => I\n    I => rec(I / tRec) => R\n\n    :sums\n    N = [S, I, R]\nend\n\n# Another possible S-I-R model definition\nSIR_3 = @stock_and_flow begin\n    :stocks\n    S\n    I\n    R\n\n    :parameters\n    c\n    beta\n    tRec\n    omega\n    alpha\n\n    :dynamic_variables\n    v_prevalence = I / totalPopulation\n    v_forceOfInfection = c * v_prevalence * beta\n\n    :flows\n    S => inf(S * v_forceOfInfection) => I\n    ☁ => births(totalPopulation * alpha) => S\n    S => deathsS(S * omega) => ☁\n    I => rec(I / tRec) => R\n    I => deathsI(I * omega) => ☁\n    R => deathsR(R * omega) => ☁\n\n\n    :sums\n    totalPopulation = [S, I, R]\nend\n\n\n\n\n\n","category":"module"},{"location":"#StockFlow.Syntax.infer_links-Tuple{StockAndFlowF, StockAndFlowF, Dict{Symbol, Vector{Int64}}}","page":"StockFlow.jl","title":"StockFlow.Syntax.infer_links","text":"infer_links(sfsrc :: StockAndFlowF, sftgt :: StockAndFlowF, NecMaps :: Dict{Symbol, Vector{Int64}})\n\nInfer LS, I, O, LV, LSV, LVV, LPV mappings for an ACSetTransformation. Returns dictionary of Symbols to lists of indices, corresponding to an ACSetTransformation argument. If there exist no such mappings (eg, no LVV), that pairing will not be included in the returned dictionary.\n\nIf A <- C -> B, and we have A -> A' and B -> B' and a unique C' such that A' <- C' -> B', we can assume C -> C'.\n\n:S => [2,4,1,3], :F => [1,2,4,3], ...\n\nNecMaps must contain keys S, F, SV, P, V, each pointing to a (possibly empty) array of indices\n\n\n\n\n\n","category":"method"},{"location":"#StockFlow.Syntax.@feet-Tuple{Expr}","page":"StockFlow.jl","title":"StockFlow.Syntax.@feet","text":"feet(block :: Expr)\n\nCreate Vector of feet using same notation for foot macro. Separated by newlines. First argument is stock, second is sum variable.\n\nfeetses = @feet begin\n    A => B\n    () => N\n    C => ()\n    D => E\n    () => ()\n    P => NI, R => NI, () => N\nend\n\n\n\n\n\n","category":"macro"},{"location":"#StockFlow.Syntax.@foot-Tuple{Expr}","page":"StockFlow.jl","title":"StockFlow.Syntax.@foot","text":"foot(block :: Expr)\n\nCreate a foot with S => N syntax, where S is stock, N is sum variable.\n\n@foot P => Q\n@foot S1 => ()\n@foot () => N\n@foot () => ()\n@foot A => N, () => NI\n\n\n\n\n\n","category":"macro"},{"location":"#StockFlow.Syntax.@stock_and_flow-Tuple{Any}","page":"StockFlow.jl","title":"StockFlow.Syntax.@stock_and_flow","text":"stock_and_flow(block :: Expr)\n\nCompiles stock and flow syntax of the line-based block form\n\n  :stocks\n    symbol_1\n    symbol_2\n    ...\n    symbol_n\n\n  :parameters\n    param_1\n    param_2\n    ...\n    param_n\n\n  :dynamic_variables\n    dyvar_1 = symbol_h * param_g ... - symbol_x / param_y\n    ...\n    dyvar_n = symbol_k * param_j - dyvar_a ... - symbol_p / param_q\n\n  :flows\n    symbol_r => flow_name_1(dyvar_k) => symbol_q\n    symbol_z => flow_name_2(dyvar_g * param_v) => symbol_p\n    ☁       => flow_name_3(symbol_c + dyvar_b) => symbol_r\n    symbol_j => flow_name_4(param_l + symbol_m) => CLOUD\n    ...\n    symbol_y => flow_name_n(dyvar_f) => ☁\n\ninto a StockAndFlowF data type for use with the StockFlow.jl modelling system.\n\n\n\n\n\n","category":"macro"},{"location":"#StockFlow.PremadeModels.seir-Tuple{}","page":"StockFlow.jl","title":"StockFlow.PremadeModels.seir","text":"Return a new SEIR model\n\n\n\n\n\n","category":"method"},{"location":"#StockFlow.PremadeModels.sir-Tuple{}","page":"StockFlow.jl","title":"StockFlow.PremadeModels.sir","text":"Return a new SIR model\n\n\n\n\n\n","category":"method"},{"location":"#StockFlow.PremadeModels.sis-Tuple{}","page":"StockFlow.jl","title":"StockFlow.PremadeModels.sis","text":"Return a new SIS model\n\n\n\n\n\n","category":"method"},{"location":"#StockFlow.PremadeModels.svi-Tuple{}","page":"StockFlow.jl","title":"StockFlow.PremadeModels.svi","text":"Return a new SVI model\n\n\n\n\n\n","category":"method"}]
}
